###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        05/Jun/2018  11:18:24
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\bsp\anttt-ehdw-04.c
#    Command line =  
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\bsp\anttt-ehdw-04.c
#        -D NRF51 -lC
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\Debug\List\
#        -o
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\bsp\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\application\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk6_1_0\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk6_1_0\Include\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk6_1_0\Include\s310\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\ble_services\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\device_manager\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk6_1_0\Include\app_common\
#        -On --require_prototypes -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\Debug\List\anttt-ehdw-04.lst
#    Object file  =  
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\Debug\Obj\anttt-ehdw-04.o
#
###############################################################################

C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\bsp\anttt-ehdw-04.c
      1          /***********************************************************************************************************************
      2          File: anttt-ehdw-04.c                                                                
      3          
      4          Description:
      5          This file provides board support functions for the nRF51422 processor on the Engenuics ANTTT boards.
      6          ***********************************************************************************************************************/
      7          
      8          #include "configuration.h"
      9          
     10          /***********************************************************************************************************************
     11          Global variable definitions with scope across entire project.
     12          All Global variable names shall start with "G_xxAnttt"
     13          ***********************************************************************************************************************/
     14          /* New variables */

   \                                 In section .bss, align 4
     15          volatile u32 G_u32SystemTime1ms;                       /* Global system time incremented every ms, max 2^32 (~49 days) */
   \                     G_u32SystemTime1ms:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     16          volatile u32 G_u32SystemTime1s;                        /* Global system time incremented every second, max 2^32 (~136 years) */
   \                     G_u32SystemTime1s:
   \   00000000                      DS8 4
     17          
     18          /*--------------------------------------------------------------------------------------------------------------------*/
     19          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     20          extern volatile u32 G_u32SystemFlags;                 /* From main.c */
     21          
     22          
     23          /***********************************************************************************************************************
     24          Global variable definitions with scope limited to this local application.
     25          Variable names shall start with "Anttt_" and be declared as static.
     26          ***********************************************************************************************************************/
     27          
     28          
     29          /***********************************************************************************************************************
     30          Function Definitions
     31          ***********************************************************************************************************************/
     32          
     33          /*--------------------------------------------------------------------------------------------------------------------*/
     34          /* Public Functions */
     35          /*--------------------------------------------------------------------------------------------------------------------*/
     36          
     37          
     38          /*--------------------------------------------------------------------------------------------------------------------*/
     39          /* Protected Functions */
     40          /*--------------------------------------------------------------------------------------------------------------------*/
     41          
     42          /*----------------------------------------------------------------------------------------------------------------------
     43          Function: WatchDogSetup
     44          
     45          Description:
     46          Configures the watchdog timer.  The dog runs at 32.768kHz from the slow built-in RC clock source which varies 
     47          over operating conditions from 30kHz to 60kHz.
     48          Since the main loop time / sleep time should be 1 ms most of the time, choosing a value
     49          of 5 seconds should be plenty to avoid watchdog resets.  
     50          
     51          Note: the processor allows the MR register to be written just once.
     52          
     53          Requires:
     54            - 
     55          
     56          Promises:
     57            - Watchdog is set for 5 second timeout but not yet enabled
     58          */

   \                                 In section .text, align 2, keep-with-next
     59          void WatchDogSetup(void)
     60          {
     61            /* Currently not configured */
     62            
     63          } /* end WatchDogSetup() */
   \                     WatchDogSetup: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     64          
     65          
     66          /*----------------------------------------------------------------------------------------------------------------------
     67          Function: GpioSetup
     68          
     69          Description
     70          Loads all registers required to set up GPIO on the processor.
     71          
     72          Requires:
     73            - All configurations must match connected hardware.
     74          
     75          Promises:
     76            - All I/O lines are set for their required function and start-state
     77          */

   \                                 In section .text, align 2, keep-with-next
     78          void GpioSetup(void)
     79          {
     80            /* Set all of the pin function registers in port 0 */
     81            NRF_GPIO->PIN_CNF[P0_30_INDEX] = P0_30_LED_HOME_3_CNF;
   \                     GpioSetup: (+1)
   \   00000000   0x2003             MOVS     R0,#+3
   \   00000002   0x....             LDR      R1,??DataTable3  ;; 0x50000778
   \   00000004   0x6008             STR      R0,[R1, #+0]
     82            NRF_GPIO->PIN_CNF[P0_29_INDEX] = P0_29_LED_HOME_6_CNF;
   \   00000006   0x2003             MOVS     R0,#+3
   \   00000008   0x....             LDR      R1,??DataTable3_1  ;; 0x50000774
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     83            NRF_GPIO->PIN_CNF[P0_28_INDEX] = P0_28_LED_AWAY_3_CNF;
   \   0000000C   0x2003             MOVS     R0,#+3
   \   0000000E   0x....             LDR      R1,??DataTable3_2  ;; 0x50000770
   \   00000010   0x6008             STR      R0,[R1, #+0]
     84            NRF_GPIO->PIN_CNF[P0_27_INDEX] = P0_27_NC_CNF;
   \   00000012   0x200C             MOVS     R0,#+12
   \   00000014   0x....             LDR      R1,??DataTable3_3  ;; 0x5000076c
   \   00000016   0x6008             STR      R0,[R1, #+0]
     85            NRF_GPIO->PIN_CNF[P0_26_INDEX] = P0_26_SW_ROW1_CNF;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x....             LDR      R1,??DataTable3_4  ;; 0x50000768
   \   0000001C   0x6008             STR      R0,[R1, #+0]
     86            NRF_GPIO->PIN_CNF[P0_25_INDEX] = P0_25_NC_CNF;
   \   0000001E   0x200C             MOVS     R0,#+12
   \   00000020   0x....             LDR      R1,??DataTable3_5  ;; 0x50000764
   \   00000022   0x6008             STR      R0,[R1, #+0]
     87            NRF_GPIO->PIN_CNF[P0_24_INDEX] = P0_24_LED_AWAY_9_CNF;
   \   00000024   0x2003             MOVS     R0,#+3
   \   00000026   0x....             LDR      R1,??DataTable3_6  ;; 0x50000760
   \   00000028   0x6008             STR      R0,[R1, #+0]
     88            NRF_GPIO->PIN_CNF[P0_23_INDEX] = P0_23_COLUMN3_CNF;
   \   0000002A   0x2003             MOVS     R0,#+3
   \   0000002C   0x....             LDR      R1,??DataTable3_7  ;; 0x5000075c
   \   0000002E   0x6008             STR      R0,[R1, #+0]
     89            NRF_GPIO->PIN_CNF[P0_22_INDEX] = P0_22_LED_HOME_9_CNF;
   \   00000030   0x2003             MOVS     R0,#+3
   \   00000032   0x....             LDR      R1,??DataTable3_8  ;; 0x50000758
   \   00000034   0x6008             STR      R0,[R1, #+0]
     90            NRF_GPIO->PIN_CNF[P0_21_INDEX] = P0_21_LED_AWAY_6_CNF;
   \   00000036   0x2003             MOVS     R0,#+3
   \   00000038   0x....             LDR      R1,??DataTable3_9  ;; 0x50000754
   \   0000003A   0x6008             STR      R0,[R1, #+0]
     91            NRF_GPIO->PIN_CNF[P0_20_INDEX] = P0_20_LED_HOME_1_CNF;
   \   0000003C   0x2003             MOVS     R0,#+3
   \   0000003E   0x....             LDR      R1,??DataTable3_10  ;; 0x50000750
   \   00000040   0x6008             STR      R0,[R1, #+0]
     92            NRF_GPIO->PIN_CNF[P0_19_INDEX] = P0_19_LED_AWAY_1_CNF;
   \   00000042   0x2003             MOVS     R0,#+3
   \   00000044   0x....             LDR      R1,??DataTable3_11  ;; 0x5000074c
   \   00000046   0x6008             STR      R0,[R1, #+0]
     93            NRF_GPIO->PIN_CNF[P0_18_INDEX] = P0_18_LED_AWAY_2_CNF;
   \   00000048   0x2003             MOVS     R0,#+3
   \   0000004A   0x....             LDR      R1,??DataTable3_12  ;; 0x50000748
   \   0000004C   0x6008             STR      R0,[R1, #+0]
     94            NRF_GPIO->PIN_CNF[P0_17_INDEX] = P0_17_LED_HOME_2_CNF;
   \   0000004E   0x2007             MOVS     R0,#+7
   \   00000050   0x....             LDR      R1,??DataTable3_13  ;; 0x50000744
   \   00000052   0x6008             STR      R0,[R1, #+0]
     95            NRF_GPIO->PIN_CNF[P0_16_INDEX] = P0_16_BUZZER_CNF;
   \   00000054   0x2003             MOVS     R0,#+3
   \   00000056   0x....             LDR      R1,??DataTable3_14  ;; 0x50000740
   \   00000058   0x6008             STR      R0,[R1, #+0]
     96            NRF_GPIO->PIN_CNF[P0_15_INDEX] = P0_15_COLUMN2_CNF;
   \   0000005A   0x2003             MOVS     R0,#+3
   \   0000005C   0x....             LDR      R1,??DataTable3_15  ;; 0x5000073c
   \   0000005E   0x6008             STR      R0,[R1, #+0]
     97            NRF_GPIO->PIN_CNF[P0_14_INDEX] = P0_14_COLUMN1_CNF;
   \   00000060   0x2003             MOVS     R0,#+3
   \   00000062   0x....             LDR      R1,??DataTable3_16  ;; 0x50000738
   \   00000064   0x6008             STR      R0,[R1, #+0]
     98            NRF_GPIO->PIN_CNF[P0_13_INDEX] = P0_13_LED_AWAY_4_CNF;
   \   00000066   0x2003             MOVS     R0,#+3
   \   00000068   0x....             LDR      R1,??DataTable3_17  ;; 0x50000734
   \   0000006A   0x6008             STR      R0,[R1, #+0]
     99            NRF_GPIO->PIN_CNF[P0_12_INDEX] = P0_12_LED_HOME_4_CNF;
   \   0000006C   0x2003             MOVS     R0,#+3
   \   0000006E   0x....             LDR      R1,??DataTable3_18  ;; 0x50000730
   \   00000070   0x6008             STR      R0,[R1, #+0]
    100            NRF_GPIO->PIN_CNF[P0_11_INDEX] = P0_11_LED_AWAY_7_CNF;
   \   00000072   0x2003             MOVS     R0,#+3
   \   00000074   0x....             LDR      R1,??DataTable3_19  ;; 0x5000072c
   \   00000076   0x6008             STR      R0,[R1, #+0]
    101            NRF_GPIO->PIN_CNF[P0_10_INDEX] = P0_10_LED_HOME_7_CNF;
   \   00000078   0x2003             MOVS     R0,#+3
   \   0000007A   0x....             LDR      R1,??DataTable3_20  ;; 0x50000728
   \   0000007C   0x6008             STR      R0,[R1, #+0]
    102            NRF_GPIO->PIN_CNF[P0_09_INDEX] = P0_09_SW_ROW3_CNF;
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x....             LDR      R1,??DataTable3_21  ;; 0x50000724
   \   00000082   0x6008             STR      R0,[R1, #+0]
    103            NRF_GPIO->PIN_CNF[P0_08_INDEX] = P0_08_SW_ROW2_CNF;
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x....             LDR      R1,??DataTable3_22  ;; 0x50000720
   \   00000088   0x6008             STR      R0,[R1, #+0]
    104            NRF_GPIO->PIN_CNF[P0_07_INDEX] = P0_07_LED_AWAY_5_CNF;
   \   0000008A   0x2003             MOVS     R0,#+3
   \   0000008C   0x....             LDR      R1,??DataTable3_23  ;; 0x5000071c
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    105            NRF_GPIO->PIN_CNF[P0_06_INDEX] = P0_06_LED_HOME_5_CNF;
   \   00000090   0x2003             MOVS     R0,#+3
   \   00000092   0x....             LDR      R1,??DataTable3_24  ;; 0x50000718
   \   00000094   0x6008             STR      R0,[R1, #+0]
    106            NRF_GPIO->PIN_CNF[P0_05_INDEX] = P0_05_LED_STATUS_RED_CNF;
   \   00000096   0x2003             MOVS     R0,#+3
   \   00000098   0x....             LDR      R1,??DataTable3_25  ;; 0x50000714
   \   0000009A   0x6008             STR      R0,[R1, #+0]
    107            NRF_GPIO->PIN_CNF[P0_04_INDEX] = P0_04_LED_STATUS_YLW_CNF;
   \   0000009C   0x2003             MOVS     R0,#+3
   \   0000009E   0x....             LDR      R1,??DataTable3_26  ;; 0x50000710
   \   000000A0   0x6008             STR      R0,[R1, #+0]
    108            NRF_GPIO->PIN_CNF[P0_03_INDEX] = P0_03_LED_STATUS_GRN_CNF;
   \   000000A2   0x2003             MOVS     R0,#+3
   \   000000A4   0x....             LDR      R1,??DataTable3_27  ;; 0x5000070c
   \   000000A6   0x6008             STR      R0,[R1, #+0]
    109            NRF_GPIO->PIN_CNF[P0_02_INDEX] = P0_02_LED_AWAY_8_CNF;
   \   000000A8   0x2003             MOVS     R0,#+3
   \   000000AA   0x....             LDR      R1,??DataTable3_28  ;; 0x50000708
   \   000000AC   0x6008             STR      R0,[R1, #+0]
    110            NRF_GPIO->PIN_CNF[P0_01_INDEX] = P0_01_LED_HOME_8_CNF;
   \   000000AE   0x2003             MOVS     R0,#+3
   \   000000B0   0x....             LDR      R1,??DataTable3_29  ;; 0x50000704
   \   000000B2   0x6008             STR      R0,[R1, #+0]
    111            NRF_GPIO->PIN_CNF[P0_00_INDEX] = P0_00_GND_CNF;
   \   000000B4   0x2003             MOVS     R0,#+3
   \   000000B6   0x....             LDR      R1,??DataTable3_30  ;; 0x50000700
   \   000000B8   0x6008             STR      R0,[R1, #+0]
    112             
    113          } /* end GpioSetup() */
   \   000000BA   0x4770             BX       LR               ;; return
    114          
    115          
    116          /*----------------------------------------------------------------------------------------------------------------------
    117          Function: PowerSetup
    118          
    119          Description
    120          Loads registers to configure various power control features of the 51422.
    121          
    122          Requires:
    123            - 
    124          
    125          Promises:
    126            - 
    127          */

   \                                 In section .text, align 2, keep-with-next
    128          void PowerSetup(void)
    129          {
    130            /* Set the sub power mode to constant latency (pg. 42 in the ref manual) */
    131            NRF_POWER->TASKS_LOWPWR   = 0;
   \                     PowerSetup: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR      R1,??DataTable3_31  ;; 0x4000007c
   \   00000004   0x6008             STR      R0,[R1, #+0]
    132            NRF_POWER->TASKS_CONSTLAT = 1;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x....             LDR      R1,??DataTable3_32  ;; 0x40000078
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    133            
    134          } /* end PowerSetup() */
   \   0000000C   0x4770             BX       LR               ;; return
    135          
    136          
    137          /*----------------------------------------------------------------------------------------------------------------------
    138          Function: ClockSetup
    139          
    140          Description:
    141          Loads all registers required to set up the processor clocks.  The main clock, HFCLK is sourced from the
    142          16MHz crystal.  The slow clock, LFCLK, will be synthesized from the 16MHz.
    143          
    144          Requires:
    145            - None.
    146          
    147          Promises:
    148            - HFCLK is running.
    149            - LFCLK is running.
    150          */

   \                                 In section .text, align 2, keep-with-next
    151          void ClockSetup(void)
    152          {
   \                     ClockSetup: (+1)
   \   00000000   0xB500             PUSH     {LR}
    153            u32 u32ClockStartTimeout = OSC_STARTUP_TIMOUT;
   \   00000002   0x....             LDR      R0,??DataTable3_33  ;; 0xf4240
    154            
    155            /* Start the main clock (HFCLK) and wait for the event to indicate it has started */
    156            NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x....             LDR      R2,??DataTable3_34  ;; 0x40000100
   \   00000008   0x6011             STR      R1,[R2, #+0]
    157            NRF_CLOCK->TASKS_HFCLKSTART = 1;
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2280             MOVS     R2,#+128
   \   0000000E   0x05D2             LSLS     R2,R2,#+23       ;; #+1073741824
   \   00000010   0x6011             STR      R1,[R2, #+0]
    158            while( !NRF_CLOCK->EVENTS_HFCLKSTARTED && (--u32ClockStartTimeout != 0) );
   \                     ??ClockSetup_0: (+1)
   \   00000012   0x....             LDR      R1,??DataTable3_34  ;; 0x40000100
   \   00000014   0x6809             LDR      R1,[R1, #+0]
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xD102             BNE      ??ClockSetup_1
   \   0000001A   0x1E40             SUBS     R0,R0,#+1
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD1F8             BNE      ??ClockSetup_0
    159            
    160            /* Check for timeout - if the clock didn't start, turn it off and flag it */
    161            if(u32ClockStartTimeout == 0)
   \                     ??ClockSetup_1: (+1)
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD108             BNE      ??ClockSetup_2
    162            {
    163              NRF_CLOCK->TASKS_HFCLKSTOP = 1;
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x....             LDR      R2,??DataTable3_35  ;; 0x40000004
   \   00000028   0x6011             STR      R1,[R2, #+0]
    164              G_u32SystemFlags |= _SYSTEM_HFCLK_NO_START;
   \   0000002A   0x....             LDR      R1,??DataTable3_36
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0x2201             MOVS     R2,#+1
   \   00000030   0x430A             ORRS     R2,R2,R1
   \   00000032   0x....             LDR      R1,??DataTable3_36
   \   00000034   0x600A             STR      R2,[R1, #+0]
    165            }
    166            NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   \                     ??ClockSetup_2: (+1)
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x....             LDR      R2,??DataTable3_34  ;; 0x40000100
   \   0000003A   0x6011             STR      R1,[R2, #+0]
    167             
    168            
    169            /* Setup and start the 32.768kHz (LFCLK) clock (synthesized from HFCLK) */
    170            NRF_CLOCK->LFCLKSRC = (CLOCK_LFCLKSRC_SRC_Synth << CLOCK_LFCLKSRC_SRC_Pos);
   \   0000003C   0x2102             MOVS     R1,#+2
   \   0000003E   0x....             LDR      R2,??DataTable3_37  ;; 0x40000518
   \   00000040   0x6011             STR      R1,[R2, #+0]
    171            NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x....             LDR      R2,??DataTable3_38  ;; 0x40000104
   \   00000046   0x6011             STR      R1,[R2, #+0]
    172            NRF_CLOCK->TASKS_LFCLKSTART = 1;
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x....             LDR      R2,??DataTable3_39  ;; 0x40000008
   \   0000004C   0x6011             STR      R1,[R2, #+0]
    173            
    174            /* No need for timeout as an HFCLK of some sort is guaranteed to be running so LFCLK has to start */
    175            while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0);
   \                     ??ClockSetup_3: (+1)
   \   0000004E   0x....             LDR      R1,??DataTable3_38  ;; 0x40000104
   \   00000050   0x6809             LDR      R1,[R1, #+0]
   \   00000052   0x2900             CMP      R1,#+0
   \   00000054   0xD0FB             BEQ      ??ClockSetup_3
    176            NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;  
   \   00000056   0x2100             MOVS     R1,#+0
   \   00000058   0x....             LDR      R2,??DataTable3_38  ;; 0x40000104
   \   0000005A   0x6011             STR      R1,[R2, #+0]
    177          } /* end ClockSetup */
   \   0000005C   0xBD00             POP      {PC}             ;; return
    178          
    179          
    180          /*----------------------------------------------------------------------------------------------------------------------
    181          Function: InterruptSetup
    182          
    183          Description:
    184          Performs initial interrupt setup.
    185          
    186          Requires:
    187            -
    188          
    189          Promises:
    190            - 
    191          */

   \                                 In section .text, align 2, keep-with-next
    192          void InterruptSetup(void)
    193          {
    194          
    195            
    196          } /* end InterruptSetup */
   \                     InterruptSetup: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    197          
    198          
    199          /*----------------------------------------------------------------------------------------------------------------------
    200          Function: SysTickSetup
    201          
    202          Description:
    203          Initializes the 1ms System Ticks from the RTC1 peripheral.
    204          
    205          Requires:
    206            - ClockSetup() to be called prior to ensure that HFCLK and LFCLK are already running.
    207            - SoftDevice has been enabled.
    208          
    209          Promises:
    210            - RTC1 is active and providing a 1ms interrupt.
    211          */

   \                                 In section .text, align 2, keep-with-next
    212          void SysTickSetup(void)
    213          {
    214            /* Configure the RTC to give a 1ms tick */
    215            NRF_RTC1->TASKS_STOP = 1;
   \                     SysTickSetup: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR      R1,??DataTable3_40  ;; 0x40011004
   \   00000004   0x6008             STR      R0,[R1, #+0]
    216            NRF_RTC1->PRESCALER = RTC_PRESCALE_INIT;
   \   00000006   0x2005             MOVS     R0,#+5
   \   00000008   0x....             LDR      R1,??DataTable3_41  ;; 0x40011508
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    217            NRF_RTC1->EVTENSET = (1 << RTC_EVTEN_TICK_Pos);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x....             LDR      R1,??DataTable3_42  ;; 0x40011344
   \   00000010   0x6008             STR      R0,[R1, #+0]
    218            NRF_RTC1->INTENSET = (1 << RTC_INTENSET_TICK_Pos);
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x....             LDR      R1,??DataTable3_43  ;; 0x40011304
   \   00000016   0x6008             STR      R0,[R1, #+0]
    219            
    220            /* Clear then start the RTC */
    221            NRF_RTC1->TASKS_CLEAR = 1;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x....             LDR      R1,??DataTable3_44  ;; 0x40011008
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    222            NRF_RTC1->TASKS_START = 1;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x....             LDR      R1,??DataTable3_45  ;; 0x40011000
   \   00000022   0x6008             STR      R0,[R1, #+0]
    223            
    224          } /* end SysTickSetup() */
   \   00000024   0x4770             BX       LR               ;; return
    225          
    226          
    227          /*----------------------------------------------------------------------------------------------------------------------
    228          Function: SystemSleep
    229          
    230          Description:
    231          Puts the system into sleep mode. 
    232          
    233          Requires:
    234            - SoftDevice is enabled.
    235          
    236          Promises:
    237            - Configures processor for maximum sleep while still allowing any required
    238              interrupt to wake it up.
    239          */

   \                                 In section .text, align 2, keep-with-next
    240          void SystemSleep(void)
    241          {    
    242              sd_app_evt_wait();
   \                     SystemSleep: (+1)
   \   00000000   0xDF3D             SVC      0x3D
    243              
    244          } /* end SystemSleep(void) */
   \   00000002   0x4770             BX       LR               ;; return
    245          
    246          
    247          /*----------------------------------------------------------------------------------------------------------------------
    248          @fn bool SystemEnterCriticalSection(u8* pu8NestedStatus_)
    249          @brief SD sourced function for disabling interrupts 
    250          
    251          Requires:
    252          - SoftDevice is enabled
    253          - pu8NestedStatus_
    254          
    255          Promises:
    256          - Application interrupts will be disabled. 
    257          */

   \                                 In section .text, align 2, keep-with-next
    258          bool SystemEnterCriticalSection(u8* pu8NestedStatus_)
    259          {
   \                     SystemEnterCriticalSection: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
    260            sd_nvic_critical_region_enter(pu8NestedStatus_);
   \   00000004   0x0008             MOVS     R0,R1
   \   00000006   0xDF2B             SVC      0x2B
    261            
    262            return (pu8NestedStatus_ == 0);
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD101             BNE      ??SystemEnterCriticalSection_0
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xE000             B        ??SystemEnterCriticalSection_1
   \                     ??SystemEnterCriticalSection_0: (+1)
   \   00000010   0x2000             MOVS     R0,#+0
   \                     ??SystemEnterCriticalSection_1: (+1)
   \   00000012   0xB2C0             UXTB     R0,R0
   \   00000014   0xBD02             POP      {R1,PC}          ;; return
    263          }
    264          
    265          
    266          /*----------------------------------------------------------------------------------------------------------------------
    267          @fn bool SystemExitCriticalSection(u8 u8NestedStatus_)
    268          
    269          @brief SD sourced function for re-enabling interrupts 
    270          
    271          Requires:
    272          - SoftDevice is enabled.
    273          
    274          Promises:
    275          - Application interrupts will be re-enabled if there are
    276          no further nested critical sections.
    277          */

   \                                 In section .text, align 2, keep-with-next
    278          bool SystemExitCriticalSection(u8 u8NestedStatus_)
    279          {
   \                     SystemExitCriticalSection: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
    280            sd_nvic_critical_region_exit(u8NestedStatus_);
   \   00000004   0x0008             MOVS     R0,R1
   \   00000006   0xB2C0             UXTB     R0,R0
   \   00000008   0xDF2C             SVC      0x2C
    281            
    282            return (u8NestedStatus_ == 0);
   \   0000000A   0xB2C9             UXTB     R1,R1
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD101             BNE      ??SystemExitCriticalSection_0
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xE000             B        ??SystemExitCriticalSection_1
   \                     ??SystemExitCriticalSection_0: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \                     ??SystemExitCriticalSection_1: (+1)
   \   00000016   0xB2C0             UXTB     R0,R0
   \   00000018   0xBD02             POP      {R1,PC}          ;; return
    283          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x50000778         DC32     0x50000778

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x50000774         DC32     0x50000774

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x50000770         DC32     0x50000770

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x5000076C         DC32     0x5000076c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x50000768         DC32     0x50000768

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x50000764         DC32     0x50000764

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x50000760         DC32     0x50000760

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x5000075C         DC32     0x5000075c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x50000758         DC32     0x50000758

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x50000754         DC32     0x50000754

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x50000750         DC32     0x50000750

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x5000074C         DC32     0x5000074c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x50000748         DC32     0x50000748

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x50000744         DC32     0x50000744

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x50000740         DC32     0x50000740

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x5000073C         DC32     0x5000073c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   0x50000738         DC32     0x50000738

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   0x50000734         DC32     0x50000734

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_18:
   \   00000000   0x50000730         DC32     0x50000730

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_19:
   \   00000000   0x5000072C         DC32     0x5000072c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_20:
   \   00000000   0x50000728         DC32     0x50000728

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_21:
   \   00000000   0x50000724         DC32     0x50000724

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_22:
   \   00000000   0x50000720         DC32     0x50000720

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_23:
   \   00000000   0x5000071C         DC32     0x5000071c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_24:
   \   00000000   0x50000718         DC32     0x50000718

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_25:
   \   00000000   0x50000714         DC32     0x50000714

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_26:
   \   00000000   0x50000710         DC32     0x50000710

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_27:
   \   00000000   0x5000070C         DC32     0x5000070c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_28:
   \   00000000   0x50000708         DC32     0x50000708

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_29:
   \   00000000   0x50000704         DC32     0x50000704

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_30:
   \   00000000   0x50000700         DC32     0x50000700

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_31:
   \   00000000   0x4000007C         DC32     0x4000007c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_32:
   \   00000000   0x40000078         DC32     0x40000078

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_33:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_34:
   \   00000000   0x40000100         DC32     0x40000100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_35:
   \   00000000   0x40000004         DC32     0x40000004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_36:
   \   00000000   0x........         DC32     G_u32SystemFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_37:
   \   00000000   0x40000518         DC32     0x40000518

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_38:
   \   00000000   0x40000104         DC32     0x40000104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_39:
   \   00000000   0x40000008         DC32     0x40000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_40:
   \   00000000   0x40011004         DC32     0x40011004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_41:
   \   00000000   0x40011508         DC32     0x40011508

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_42:
   \   00000000   0x40011344         DC32     0x40011344

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_43:
   \   00000000   0x40011304         DC32     0x40011304

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_44:
   \   00000000   0x40011008         DC32     0x40011008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_45:
   \   00000000   0x40011000         DC32     0x40011000
    284          
    285          
    286          
    287          
    288          /*--------------------------------------------------------------------------------------------------------------------*/
    289          /* End of File */
    290          /*--------------------------------------------------------------------------------------------------------------------*/
    291          
    292          
    293          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   ClockSetup
       0   GpioSetup
       0   InterruptSetup
       0   PowerSetup
       0   SysTickSetup
       8   SystemEnterCriticalSection
       8   SystemExitCriticalSection
       0   SystemSleep
       0   WatchDogSetup


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_18
       4  ??DataTable3_19
       4  ??DataTable3_2
       4  ??DataTable3_20
       4  ??DataTable3_21
       4  ??DataTable3_22
       4  ??DataTable3_23
       4  ??DataTable3_24
       4  ??DataTable3_25
       4  ??DataTable3_26
       4  ??DataTable3_27
       4  ??DataTable3_28
       4  ??DataTable3_29
       4  ??DataTable3_3
       4  ??DataTable3_30
       4  ??DataTable3_31
       4  ??DataTable3_32
       4  ??DataTable3_33
       4  ??DataTable3_34
       4  ??DataTable3_35
       4  ??DataTable3_36
       4  ??DataTable3_37
       4  ??DataTable3_38
       4  ??DataTable3_39
       4  ??DataTable3_4
       4  ??DataTable3_40
       4  ??DataTable3_41
       4  ??DataTable3_42
       4  ??DataTable3_43
       4  ??DataTable3_44
       4  ??DataTable3_45
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      94  ClockSetup
       4  G_u32SystemTime1ms
       4  G_u32SystemTime1s
     188  GpioSetup
       2  InterruptSetup
      14  PowerSetup
      38  SysTickSetup
      22  SystemEnterCriticalSection
      26  SystemExitCriticalSection
       4  SystemSleep
       2  WatchDogSetup

 
   8 bytes in section .bss
 574 bytes in section .text
 
 574 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
