###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        28/May/2018  09:17:42
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\bsp\anttt-ehdw-04.c
#    Command line =  
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\bsp\anttt-ehdw-04.c
#        -lC
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\Debug\List\
#        -o
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\bsp\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\application\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk4_2_2\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk4_2_2\Include\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk4_2_2\Include\ant\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk4_2_2\Include\app_common\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk4_2_2\Source\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk4_2_2\Source\app_common\
#        -On -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\Debug\List\anttt-ehdw-04.lst
#    Object file  =  
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\Debug\Obj\anttt-ehdw-04.o
#
###############################################################################

C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\bsp\anttt-ehdw-04.c
      1          /***********************************************************************************************************************
      2          File: anttt-ehdw-04.c                                                                
      3          
      4          Description:
      5          This file provides board support functions for the nRF51422 processor on the Engenuics ANTTT boards.
      6          ***********************************************************************************************************************/
      7          
      8          #include "configuration.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     NVIC_SetPriority: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB240             SXTB     R0,R0
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD522             BPL      ??NVIC_SetPriority_0
   \   00000008   0x....             LDR      R4,??DataTable3  ;; 0xe000ed1c
   \   0000000A   0xB240             SXTB     R0,R0
   \   0000000C   0x0702             LSLS     R2,R0,#+28       ;; ZeroExtS R2,R0,#+28,#+28
   \   0000000E   0x0F12             LSRS     R2,R2,#+28
   \   00000010   0x3A08             SUBS     R2,R2,#+8
   \   00000012   0x0015             MOVS     R5,R2
   \   00000014   0x08AD             LSRS     R5,R5,#+2
   \   00000016   0x2204             MOVS     R2,#+4
   \   00000018   0x4355             MULS     R5,R2,R5
   \   0000001A   0x....             LDR      R2,??DataTable3  ;; 0xe000ed1c
   \   0000001C   0xB240             SXTB     R0,R0
   \   0000001E   0x0703             LSLS     R3,R0,#+28       ;; ZeroExtS R3,R0,#+28,#+28
   \   00000020   0x0F1B             LSRS     R3,R3,#+28
   \   00000022   0x3B08             SUBS     R3,R3,#+8
   \   00000024   0x089B             LSRS     R3,R3,#+2
   \   00000026   0x2604             MOVS     R6,#+4
   \   00000028   0x4373             MULS     R3,R6,R3
   \   0000002A   0x58D2             LDR      R2,[R2, R3]
   \   0000002C   0x23FF             MOVS     R3,#+255
   \   0000002E   0x0786             LSLS     R6,R0,#+30       ;; ZeroExtS R6,R0,#+30,#+30
   \   00000030   0x0FB6             LSRS     R6,R6,#+30
   \   00000032   0x2708             MOVS     R7,#+8
   \   00000034   0x437E             MULS     R6,R7,R6
   \   00000036   0x40B3             LSLS     R3,R3,R6
   \   00000038   0x439A             BICS     R2,R2,R3
   \   0000003A   0x018B             LSLS     R3,R1,#+6
   \   0000003C   0xB2DB             UXTB     R3,R3
   \   0000003E   0x0786             LSLS     R6,R0,#+30       ;; ZeroExtS R6,R0,#+30,#+30
   \   00000040   0x0FB6             LSRS     R6,R6,#+30
   \   00000042   0x2708             MOVS     R7,#+8
   \   00000044   0x437E             MULS     R6,R7,R6
   \   00000046   0x40B3             LSLS     R3,R3,R6
   \   00000048   0x4313             ORRS     R3,R3,R2
   \   0000004A   0x5163             STR      R3,[R4, R5]
   \   0000004C   0xE01C             B        ??NVIC_SetPriority_1
   \                     ??NVIC_SetPriority_0: (+1)
   \   0000004E   0x....             LDR      R2,??DataTable5  ;; 0xe000e400
   \   00000050   0xB240             SXTB     R0,R0
   \   00000052   0x0003             MOVS     R3,R0
   \   00000054   0x089B             LSRS     R3,R3,#+2
   \   00000056   0x2404             MOVS     R4,#+4
   \   00000058   0x4363             MULS     R3,R4,R3
   \   0000005A   0x58D2             LDR      R2,[R2, R3]
   \   0000005C   0x23FF             MOVS     R3,#+255
   \   0000005E   0x0784             LSLS     R4,R0,#+30       ;; ZeroExtS R4,R0,#+30,#+30
   \   00000060   0x0FA4             LSRS     R4,R4,#+30
   \   00000062   0x2508             MOVS     R5,#+8
   \   00000064   0x436C             MULS     R4,R5,R4
   \   00000066   0x40A3             LSLS     R3,R3,R4
   \   00000068   0x439A             BICS     R2,R2,R3
   \   0000006A   0x018B             LSLS     R3,R1,#+6
   \   0000006C   0xB2DB             UXTB     R3,R3
   \   0000006E   0x0784             LSLS     R4,R0,#+30       ;; ZeroExtS R4,R0,#+30,#+30
   \   00000070   0x0FA4             LSRS     R4,R4,#+30
   \   00000072   0x2508             MOVS     R5,#+8
   \   00000074   0x436C             MULS     R4,R5,R4
   \   00000076   0x40A3             LSLS     R3,R3,R4
   \   00000078   0x4313             ORRS     R3,R3,R2
   \   0000007A   0x....             LDR      R2,??DataTable5  ;; 0xe000e400
   \   0000007C   0xB240             SXTB     R0,R0
   \   0000007E   0x0004             MOVS     R4,R0
   \   00000080   0x08A4             LSRS     R4,R4,#+2
   \   00000082   0x2504             MOVS     R5,#+4
   \   00000084   0x436C             MULS     R4,R5,R4
   \   00000086   0x5113             STR      R3,[R2, R4]
   \                     ??NVIC_SetPriority_1: (+1)
   \   00000088   0xBDF0             POP      {R4-R7,PC}       ;; return
      9          
     10          /***********************************************************************************************************************
     11          Global variable definitions with scope across entire project.
     12          All Global variable names shall start with "G_xxAnttt"
     13          ***********************************************************************************************************************/
     14          /* New variables */

   \                                 In section .bss, align 4
     15          volatile u32 G_u32SystemTime1ms;                       /* Global system time incremented every ms, max 2^32 (~49 days) */
   \                     G_u32SystemTime1ms:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     16          volatile u32 G_u32SystemTime1s;                        /* Global system time incremented every second, max 2^32 (~136 years) */
   \                     G_u32SystemTime1s:
   \   00000000                      DS8 4
     17          
     18          /*--------------------------------------------------------------------------------------------------------------------*/
     19          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     20          extern volatile u32 G_u32SystemFlags;                 /* From main.c */
     21          
     22          
     23          /***********************************************************************************************************************
     24          Global variable definitions with scope limited to this local application.
     25          Variable names shall start with "Anttt_" and be declared as static.
     26          ***********************************************************************************************************************/
     27          
     28          
     29          /***********************************************************************************************************************
     30          Function Definitions
     31          ***********************************************************************************************************************/
     32          
     33          /*--------------------------------------------------------------------------------------------------------------------*/
     34          /* Public Functions */
     35          /*--------------------------------------------------------------------------------------------------------------------*/
     36          
     37          
     38          /*--------------------------------------------------------------------------------------------------------------------*/
     39          /* Protected Functions */
     40          /*--------------------------------------------------------------------------------------------------------------------*/
     41          
     42          /*----------------------------------------------------------------------------------------------------------------------
     43          Function: WatchDogSetup
     44          
     45          Description:
     46          Configures the watchdog timer.  The dog runs at 32.768kHz from the slow built-in RC clock source which varies over operating conditions from 30kHz to 60kHz.
     47          Since the main loop time / sleep time should be 1 ms most of the time, choosing a value
     48          of 5 seconds should be plenty to avoid watchdog resets.  
     49          
     50          Note: the processor allows the MR register to be written just once.
     51          
     52          Requires:
     53            - 
     54          
     55          Promises:
     56            - Watchdog is set for 5 second timeout but not yet enabled
     57          */

   \                                 In section .text, align 2, keep-with-next
     58          void WatchDogSetup(void)
     59          {
     60           
     61          } /* end WatchDogSetup() */
   \                     WatchDogSetup: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     62          
     63          
     64          /*----------------------------------------------------------------------------------------------------------------------
     65          Function: GpioSetup
     66          
     67          Description
     68          Loads all registers required to set up GPIO on the processor.
     69          
     70          Requires:
     71            - All configurations must match connected hardware.
     72          
     73          Promises:
     74            - All I/O lines are set for their required function and start-state
     75          */

   \                                 In section .text, align 2, keep-with-next
     76          void GpioSetup(void)
     77          {
     78            /* Set all of the pin function registers in port 0 */
     79            NRF_GPIO->PIN_CNF[P0_30_INDEX] = P0_30_LED_HOME_3_CNF;
   \                     GpioSetup: (+1)
   \   00000000   0x2003             MOVS     R0,#+3
   \   00000002   0x....             LDR      R1,??DataTable5_1  ;; 0x50000778
   \   00000004   0x6008             STR      R0,[R1, #+0]
     80            NRF_GPIO->PIN_CNF[P0_29_INDEX] = P0_29_LED_HOME_6_CNF;
   \   00000006   0x2003             MOVS     R0,#+3
   \   00000008   0x....             LDR      R1,??DataTable5_2  ;; 0x50000774
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     81            NRF_GPIO->PIN_CNF[P0_28_INDEX] = P0_28_LED_AWAY_3_CNF;
   \   0000000C   0x2003             MOVS     R0,#+3
   \   0000000E   0x....             LDR      R1,??DataTable5_3  ;; 0x50000770
   \   00000010   0x6008             STR      R0,[R1, #+0]
     82            NRF_GPIO->PIN_CNF[P0_27_INDEX] = P0_27_NC_CNF;
   \   00000012   0x200C             MOVS     R0,#+12
   \   00000014   0x....             LDR      R1,??DataTable5_4  ;; 0x5000076c
   \   00000016   0x6008             STR      R0,[R1, #+0]
     83            NRF_GPIO->PIN_CNF[P0_26_INDEX] = P0_26_SW_ROW1_CNF;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x....             LDR      R1,??DataTable5_5  ;; 0x50000768
   \   0000001C   0x6008             STR      R0,[R1, #+0]
     84            NRF_GPIO->PIN_CNF[P0_25_INDEX] = P0_25_NC_CNF;
   \   0000001E   0x200C             MOVS     R0,#+12
   \   00000020   0x....             LDR      R1,??DataTable5_6  ;; 0x50000764
   \   00000022   0x6008             STR      R0,[R1, #+0]
     85            NRF_GPIO->PIN_CNF[P0_24_INDEX] = P0_24_LED_AWAY_9_CNF;
   \   00000024   0x2003             MOVS     R0,#+3
   \   00000026   0x....             LDR      R1,??DataTable5_7  ;; 0x50000760
   \   00000028   0x6008             STR      R0,[R1, #+0]
     86            NRF_GPIO->PIN_CNF[P0_23_INDEX] = P0_23_COLUMN3_CNF;
   \   0000002A   0x2003             MOVS     R0,#+3
   \   0000002C   0x....             LDR      R1,??DataTable5_8  ;; 0x5000075c
   \   0000002E   0x6008             STR      R0,[R1, #+0]
     87            NRF_GPIO->PIN_CNF[P0_22_INDEX] = P0_22_LED_HOME_9_CNF;
   \   00000030   0x2003             MOVS     R0,#+3
   \   00000032   0x....             LDR      R1,??DataTable5_9  ;; 0x50000758
   \   00000034   0x6008             STR      R0,[R1, #+0]
     88            NRF_GPIO->PIN_CNF[P0_21_INDEX] = P0_21_LED_AWAY_6_CNF;
   \   00000036   0x2003             MOVS     R0,#+3
   \   00000038   0x....             LDR      R1,??DataTable5_10  ;; 0x50000754
   \   0000003A   0x6008             STR      R0,[R1, #+0]
     89            NRF_GPIO->PIN_CNF[P0_20_INDEX] = P0_20_LED_HOME_1_CNF;
   \   0000003C   0x2003             MOVS     R0,#+3
   \   0000003E   0x....             LDR      R1,??DataTable5_11  ;; 0x50000750
   \   00000040   0x6008             STR      R0,[R1, #+0]
     90            NRF_GPIO->PIN_CNF[P0_19_INDEX] = P0_19_LED_AWAY_1_CNF;
   \   00000042   0x2003             MOVS     R0,#+3
   \   00000044   0x....             LDR      R1,??DataTable5_12  ;; 0x5000074c
   \   00000046   0x6008             STR      R0,[R1, #+0]
     91            NRF_GPIO->PIN_CNF[P0_18_INDEX] = P0_18_LED_AWAY_2_CNF;
   \   00000048   0x2003             MOVS     R0,#+3
   \   0000004A   0x....             LDR      R1,??DataTable5_13  ;; 0x50000748
   \   0000004C   0x6008             STR      R0,[R1, #+0]
     92            NRF_GPIO->PIN_CNF[P0_17_INDEX] = P0_17_LED_HOME_2_CNF;
   \   0000004E   0x2007             MOVS     R0,#+7
   \   00000050   0x....             LDR      R1,??DataTable5_14  ;; 0x50000744
   \   00000052   0x6008             STR      R0,[R1, #+0]
     93            NRF_GPIO->PIN_CNF[P0_16_INDEX] = P0_16_BUZZER_CNF;
   \   00000054   0x2003             MOVS     R0,#+3
   \   00000056   0x....             LDR      R1,??DataTable5_15  ;; 0x50000740
   \   00000058   0x6008             STR      R0,[R1, #+0]
     94            NRF_GPIO->PIN_CNF[P0_15_INDEX] = P0_15_COLUMN2_CNF;
   \   0000005A   0x2003             MOVS     R0,#+3
   \   0000005C   0x....             LDR      R1,??DataTable5_16  ;; 0x5000073c
   \   0000005E   0x6008             STR      R0,[R1, #+0]
     95            NRF_GPIO->PIN_CNF[P0_14_INDEX] = P0_14_COLUMN1_CNF;
   \   00000060   0x2003             MOVS     R0,#+3
   \   00000062   0x....             LDR      R1,??DataTable5_17  ;; 0x50000738
   \   00000064   0x6008             STR      R0,[R1, #+0]
     96            NRF_GPIO->PIN_CNF[P0_13_INDEX] = P0_13_LED_AWAY_4_CNF;
   \   00000066   0x2003             MOVS     R0,#+3
   \   00000068   0x....             LDR      R1,??DataTable5_18  ;; 0x50000734
   \   0000006A   0x6008             STR      R0,[R1, #+0]
     97            NRF_GPIO->PIN_CNF[P0_12_INDEX] = P0_12_LED_HOME_4_CNF;
   \   0000006C   0x2003             MOVS     R0,#+3
   \   0000006E   0x....             LDR      R1,??DataTable5_19  ;; 0x50000730
   \   00000070   0x6008             STR      R0,[R1, #+0]
     98            NRF_GPIO->PIN_CNF[P0_11_INDEX] = P0_11_LED_AWAY_7_CNF;
   \   00000072   0x2003             MOVS     R0,#+3
   \   00000074   0x....             LDR      R1,??DataTable5_20  ;; 0x5000072c
   \   00000076   0x6008             STR      R0,[R1, #+0]
     99            NRF_GPIO->PIN_CNF[P0_10_INDEX] = P0_10_LED_HOME_7_CNF;
   \   00000078   0x2003             MOVS     R0,#+3
   \   0000007A   0x....             LDR      R1,??DataTable5_21  ;; 0x50000728
   \   0000007C   0x6008             STR      R0,[R1, #+0]
    100            NRF_GPIO->PIN_CNF[P0_09_INDEX] = P0_09_SW_ROW3_CNF;
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x....             LDR      R1,??DataTable5_22  ;; 0x50000724
   \   00000082   0x6008             STR      R0,[R1, #+0]
    101            NRF_GPIO->PIN_CNF[P0_08_INDEX] = P0_08_SW_ROW2_CNF;
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x....             LDR      R1,??DataTable5_23  ;; 0x50000720
   \   00000088   0x6008             STR      R0,[R1, #+0]
    102            NRF_GPIO->PIN_CNF[P0_07_INDEX] = P0_07_LED_AWAY_5_CNF;
   \   0000008A   0x2003             MOVS     R0,#+3
   \   0000008C   0x....             LDR      R1,??DataTable5_24  ;; 0x5000071c
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    103            NRF_GPIO->PIN_CNF[P0_06_INDEX] = P0_06_LED_HOME_5_CNF;
   \   00000090   0x2003             MOVS     R0,#+3
   \   00000092   0x....             LDR      R1,??DataTable5_25  ;; 0x50000718
   \   00000094   0x6008             STR      R0,[R1, #+0]
    104            NRF_GPIO->PIN_CNF[P0_05_INDEX] = P0_05_LED_STATUS_RED_CNF;
   \   00000096   0x2003             MOVS     R0,#+3
   \   00000098   0x....             LDR      R1,??DataTable5_26  ;; 0x50000714
   \   0000009A   0x6008             STR      R0,[R1, #+0]
    105            NRF_GPIO->PIN_CNF[P0_04_INDEX] = P0_04_LED_STATUS_YLW_CNF;
   \   0000009C   0x2003             MOVS     R0,#+3
   \   0000009E   0x....             LDR      R1,??DataTable5_27  ;; 0x50000710
   \   000000A0   0x6008             STR      R0,[R1, #+0]
    106            NRF_GPIO->PIN_CNF[P0_03_INDEX] = P0_03_LED_STATUS_GRN_CNF;
   \   000000A2   0x2003             MOVS     R0,#+3
   \   000000A4   0x....             LDR      R1,??DataTable5_28  ;; 0x5000070c
   \   000000A6   0x6008             STR      R0,[R1, #+0]
    107            NRF_GPIO->PIN_CNF[P0_02_INDEX] = P0_02_LED_AWAY_8_CNF;
   \   000000A8   0x2003             MOVS     R0,#+3
   \   000000AA   0x....             LDR      R1,??DataTable5_29  ;; 0x50000708
   \   000000AC   0x6008             STR      R0,[R1, #+0]
    108            NRF_GPIO->PIN_CNF[P0_01_INDEX] = P0_01_LED_HOME_8_CNF;
   \   000000AE   0x2003             MOVS     R0,#+3
   \   000000B0   0x....             LDR      R1,??DataTable5_30  ;; 0x50000704
   \   000000B2   0x6008             STR      R0,[R1, #+0]
    109            NRF_GPIO->PIN_CNF[P0_00_INDEX] = P0_00_GND_CNF;
   \   000000B4   0x2003             MOVS     R0,#+3
   \   000000B6   0x....             LDR      R1,??DataTable5_31  ;; 0x50000700
   \   000000B8   0x6008             STR      R0,[R1, #+0]
    110             
    111          } /* end GpioSetup() */
   \   000000BA   0x4770             BX       LR               ;; return
    112          
    113          
    114          /*----------------------------------------------------------------------------------------------------------------------
    115          Function: PowerSetup
    116          
    117          Description
    118          Loads registers to configure various power control features of the 51422.
    119          
    120          Requires:
    121            - 
    122          
    123          Promises:
    124            - 
    125          */

   \                                 In section .text, align 2, keep-with-next
    126          void PowerSetup(void)
    127          {
    128            /* Set the sub power mode to constant latency (pg. 42 in the ref manual) */
    129            NRF_POWER->TASKS_LOWPWR   = 0;
   \                     PowerSetup: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR      R1,??DataTable5_32  ;; 0x4000007c
   \   00000004   0x6008             STR      R0,[R1, #+0]
    130            NRF_POWER->TASKS_CONSTLAT = 1;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x....             LDR      R1,??DataTable5_33  ;; 0x40000078
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    131          
    132            
    133          } /* end PowerSetup() */
   \   0000000C   0x4770             BX       LR               ;; return
    134          
    135          
    136          /*----------------------------------------------------------------------------------------------------------------------
    137          Function: ClockSetup
    138          
    139          Description:
    140          Loads all registers required to set up the processor clocks.  The main clock, HFCLK is sourced from the
    141          16MHz crystal.  The slow clock, LFCLK, will be synthesized from the 16MHz and configured to provide
    142          a 1ms system tick.
    143          
    144          Requires:
    145            - 
    146          
    147          Promises:
    148            - 
    149          */

   \                                 In section .text, align 2, keep-with-next
    150          void ClockSetup(void)
    151          {
   \                     ClockSetup: (+1)
   \   00000000   0xB500             PUSH     {LR}
    152            u32 u32ClockStartTimeout = OSC_STARTUP_TIMOUT;
   \   00000002   0x....             LDR      R0,??DataTable5_34  ;; 0xf4240
    153            
    154            /* Start the main clock (HFCLK) and wait for the event to indicate it has started */
    155            NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x....             LDR      R2,??DataTable5_35  ;; 0x40000100
   \   00000008   0x6011             STR      R1,[R2, #+0]
    156            NRF_CLOCK->TASKS_HFCLKSTART = 1;
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2280             MOVS     R2,#+128
   \   0000000E   0x05D2             LSLS     R2,R2,#+23       ;; #+1073741824
   \   00000010   0x6011             STR      R1,[R2, #+0]
    157            while( !NRF_CLOCK->EVENTS_HFCLKSTARTED && (--u32ClockStartTimeout != 0) );
   \                     ??ClockSetup_0: (+1)
   \   00000012   0x....             LDR      R1,??DataTable5_35  ;; 0x40000100
   \   00000014   0x6809             LDR      R1,[R1, #+0]
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xD102             BNE      ??ClockSetup_1
   \   0000001A   0x1E40             SUBS     R0,R0,#+1
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD1F8             BNE      ??ClockSetup_0
    158            
    159            /* Check for timeout - if the clock didn't start, turn it off and flag it */
    160            if(u32ClockStartTimeout == 0)
   \                     ??ClockSetup_1: (+1)
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD108             BNE      ??ClockSetup_2
    161            {
    162              NRF_CLOCK->TASKS_HFCLKSTOP = 1;
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x....             LDR      R2,??DataTable5_36  ;; 0x40000004
   \   00000028   0x6011             STR      R1,[R2, #+0]
    163              G_u32SystemFlags |= _SYSTEM_HFCLK_NO_START;
   \   0000002A   0x....             LDR      R1,??DataTable5_37
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0x2201             MOVS     R2,#+1
   \   00000030   0x430A             ORRS     R2,R2,R1
   \   00000032   0x....             LDR      R1,??DataTable5_37
   \   00000034   0x600A             STR      R2,[R1, #+0]
    164            }
    165            NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   \                     ??ClockSetup_2: (+1)
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x....             LDR      R2,??DataTable5_35  ;; 0x40000100
   \   0000003A   0x6011             STR      R1,[R2, #+0]
    166             
    167            
    168            /* Setup and start the 32.768kHz (LFCLK) clock (synthesized from HFCLK) */
    169            NRF_CLOCK->LFCLKSRC = (CLOCK_LFCLKSRC_SRC_Synth << CLOCK_LFCLKSRC_SRC_Pos);
   \   0000003C   0x2102             MOVS     R1,#+2
   \   0000003E   0x....             LDR      R2,??DataTable5_38  ;; 0x40000518
   \   00000040   0x6011             STR      R1,[R2, #+0]
    170            NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x....             LDR      R2,??DataTable5_39  ;; 0x40000104
   \   00000046   0x6011             STR      R1,[R2, #+0]
    171            NRF_CLOCK->TASKS_LFCLKSTART = 1;
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x....             LDR      R2,??DataTable5_40  ;; 0x40000008
   \   0000004C   0x6011             STR      R1,[R2, #+0]
    172            
    173            /* No need for timeout as an HFCLK of some sort is guaranteed to be running so LFCLK has to start */
    174            while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0);
   \                     ??ClockSetup_3: (+1)
   \   0000004E   0x....             LDR      R1,??DataTable5_39  ;; 0x40000104
   \   00000050   0x6809             LDR      R1,[R1, #+0]
   \   00000052   0x2900             CMP      R1,#+0
   \   00000054   0xD0FB             BEQ      ??ClockSetup_3
    175            NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
   \   00000056   0x2100             MOVS     R1,#+0
   \   00000058   0x....             LDR      R2,??DataTable5_39  ;; 0x40000104
   \   0000005A   0x6011             STR      R1,[R2, #+0]
    176           
    177          #if 0  /* Can't use RTC because we synthesize LFCLK and therefore RTC would not be clocked when HFCLK is sleeping */  
    178            /* Configure the RTC to give a 1ms tick */
    179            NRF_RTC1->STOP = 1;
    180            NRF_RTC1->PRESCALER = RTC_PRESCALE_INIT;
    181            NRF_RTC1->EVTENSET = (1 << RTC_EVTEN_TICK_Pos);
    182            NRF_RTC1->INTENSET = (1 << RTC_INTENSET_TICK_Pos);
    183            
    184            /* Clear then start the RTC */
    185            NRF_RTC1->CLEAR = 1;
    186            NRF_RTC1->START = 1;
    187          #endif
    188            
    189          } /* end ClockSetup */
   \   0000005C   0xBD00             POP      {PC}             ;; return
    190          
    191          
    192          /*----------------------------------------------------------------------------------------------------------------------
    193          Function: InterruptSetup
    194          
    195          Description:
    196          Performs initial interrupt setup.
    197          
    198          Requires:
    199            -
    200          
    201          Promises:
    202            - 
    203          */

   \                                 In section .text, align 2, keep-with-next
    204          void InterruptSetup(void)
    205          {
    206          
    207            
    208          } /* end InterruptSetup */
   \                     InterruptSetup: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    209          
    210          
    211          /*----------------------------------------------------------------------------------------------------------------------
    212          Function: SysTickSetup
    213          
    214          Description:
    215          Initializes the 1ms and 1s System Ticks from the TIMER1 peripheral.
    216          Since this application is not concerned about power, we can keep the 16MHz clock
    217          on and power TIMER1 all the time.  
    218          
    219          Requires:
    220            -
    221          
    222          Promises:
    223            - Both system timers are zeroed and the Timer is configured to produce 1ms interrupts
    224          */

   \                                 In section .text, align 2, keep-with-next
    225          void SysTickSetup(void)
    226          {
   \                     SysTickSetup: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    227            G_u32SystemTime1ms = 0;      
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR      R1,??DataTable5_41
   \   00000006   0x6008             STR      R0,[R1, #+0]
    228            G_u32SystemTime1s  = 0;   
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR      R1,??DataTable5_42
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    229            
    230            /* Load the SysTick Timer */
    231            NRF_TIMER1->MODE      = TIMER_MODE_MODE_Timer << TIMER_MODE_MODE_Pos;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR      R1,??DataTable5_43  ;; 0x40009504
   \   00000012   0x6008             STR      R0,[R1, #+0]
    232            NRF_TIMER1->BITMODE   = TIMER_BITMODE_BITMODE_16Bit << TIMER_BITMODE_BITMODE_Pos;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x....             LDR      R1,??DataTable5_44  ;; 0x40009508
   \   00000018   0x6008             STR      R0,[R1, #+0]
    233            NRF_TIMER1->PRESCALER = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x....             LDR      R1,??DataTable5_45  ;; 0x40009510
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    234            NRF_TIMER1->SHORTS    = TIMER_SHORTS_COMPARE0_CLEAR_Enabled << TIMER_SHORTS_COMPARE0_CLEAR_Pos;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x....             LDR      R1,??DataTable5_46  ;; 0x40009200
   \   00000024   0x6008             STR      R0,[R1, #+0]
    235            NRF_TIMER1->CC[0]     = TIMER_COUNT_1MS;
   \   00000026   0x20FA             MOVS     R0,#+250
   \   00000028   0x0180             LSLS     R0,R0,#+6        ;; #+16000
   \   0000002A   0x....             LDR      R1,??DataTable5_47  ;; 0x40009540
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    236            NRF_TIMER1->INTENSET  = TIMER_INTENSET_COMPARE0_Enabled << TIMER_INTENSET_COMPARE0_Pos;
   \   0000002E   0x2080             MOVS     R0,#+128
   \   00000030   0x0240             LSLS     R0,R0,#+9        ;; #+65536
   \   00000032   0x....             LDR      R1,??DataTable5_48  ;; 0x40009304
   \   00000034   0x6008             STR      R0,[R1, #+0]
    237            
    238            /* Enable TIMER1 interrupt */
    239            NVIC_SetPriority(TIMER1_IRQn, 0);
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x2009             MOVS     R0,#+9
   \   0000003A   0x.... 0x....      BL       NVIC_SetPriority
    240            //NVIC_EnableIRQ(TIMER1_IRQn);
    241            
    242            /* Start timer */
    243            NRF_TIMER1->TASKS_START = 1;
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x....             LDR      R1,??DataTable5_49  ;; 0x40009000
   \   00000042   0x6008             STR      R0,[R1, #+0]
    244          
    245            
    246          } /* end SysTickSetup() */
   \   00000044   0xBD01             POP      {R0,PC}          ;; return
    247          
    248          
    249          /*----------------------------------------------------------------------------------------------------------------------
    250          Function: SystemSleep
    251          
    252          Description:
    253          Puts the system into sleep mode. 
    254          
    255          TBD
    256          
    257          Requires:
    258            - TBD
    259          
    260          Promises:
    261            - Configures processor for maximum sleep while still allowing any required
    262              interrupt to wake it up.
    263          */

   \                                 In section .text, align 2, keep-with-next
    264          void SystemSleep(void)
    265          {    
   \                     SystemSleep: (+1)
   \   00000000   0xB500             PUSH     {LR}
    266            /* Set the system control register for Sleep (but not Deep Sleep) */
    267             
    268             /* Set the sleep flag (cleared only in SysTick ISR */
    269             G_u32SystemFlags |= _SYSTEM_SLEEPING;
   \   00000002   0x....             LDR      R0,??DataTable5_37
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2180             MOVS     R1,#+128
   \   00000008   0x05C9             LSLS     R1,R1,#+23       ;; #+1073741824
   \   0000000A   0x4301             ORRS     R1,R1,R0
   \   0000000C   0x....             LDR      R0,??DataTable5_37
   \   0000000E   0x6001             STR      R1,[R0, #+0]
    270          
    271             while(NRF_TIMER1->EVENTS_COMPARE[0] == 0);
   \                     ??SystemSleep_0: (+1)
   \   00000010   0x....             LDR      R0,??DataTable5_50  ;; 0x40009140
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD0FB             BEQ      ??SystemSleep_0
    272             NRF_TIMER1->EVENTS_COMPARE[0] = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x....             LDR      R1,??DataTable5_50  ;; 0x40009140
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    273             
    274            /* Now sleep until an event wakes us up */
    275             //while(G_u32SystemFlags & _SYSTEM_SLEEPING)
    276             {
    277             }
    278          
    279            /* Clear the sleep mode status flags */
    280              
    281          } /* end SystemSleep(void) */
   \   0000001E   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0xE000ED1C         DC32     0xe000ed1c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x50000778         DC32     0x50000778

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x50000774         DC32     0x50000774

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x50000770         DC32     0x50000770

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x5000076C         DC32     0x5000076c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x50000768         DC32     0x50000768

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x50000764         DC32     0x50000764

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x50000760         DC32     0x50000760

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x5000075C         DC32     0x5000075c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x50000758         DC32     0x50000758

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x50000754         DC32     0x50000754

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x50000750         DC32     0x50000750

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x5000074C         DC32     0x5000074c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x50000748         DC32     0x50000748

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x50000744         DC32     0x50000744

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x50000740         DC32     0x50000740

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   0x5000073C         DC32     0x5000073c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_17:
   \   00000000   0x50000738         DC32     0x50000738

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_18:
   \   00000000   0x50000734         DC32     0x50000734

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_19:
   \   00000000   0x50000730         DC32     0x50000730

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_20:
   \   00000000   0x5000072C         DC32     0x5000072c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_21:
   \   00000000   0x50000728         DC32     0x50000728

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_22:
   \   00000000   0x50000724         DC32     0x50000724

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_23:
   \   00000000   0x50000720         DC32     0x50000720

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_24:
   \   00000000   0x5000071C         DC32     0x5000071c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_25:
   \   00000000   0x50000718         DC32     0x50000718

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_26:
   \   00000000   0x50000714         DC32     0x50000714

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_27:
   \   00000000   0x50000710         DC32     0x50000710

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_28:
   \   00000000   0x5000070C         DC32     0x5000070c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_29:
   \   00000000   0x50000708         DC32     0x50000708

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_30:
   \   00000000   0x50000704         DC32     0x50000704

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_31:
   \   00000000   0x50000700         DC32     0x50000700

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_32:
   \   00000000   0x4000007C         DC32     0x4000007c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_33:
   \   00000000   0x40000078         DC32     0x40000078

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_34:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_35:
   \   00000000   0x40000100         DC32     0x40000100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_36:
   \   00000000   0x40000004         DC32     0x40000004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_37:
   \   00000000   0x........         DC32     G_u32SystemFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_38:
   \   00000000   0x40000518         DC32     0x40000518

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_39:
   \   00000000   0x40000104         DC32     0x40000104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_40:
   \   00000000   0x40000008         DC32     0x40000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_41:
   \   00000000   0x........         DC32     G_u32SystemTime1ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_42:
   \   00000000   0x........         DC32     G_u32SystemTime1s

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_43:
   \   00000000   0x40009504         DC32     0x40009504

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_44:
   \   00000000   0x40009508         DC32     0x40009508

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_45:
   \   00000000   0x40009510         DC32     0x40009510

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_46:
   \   00000000   0x40009200         DC32     0x40009200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_47:
   \   00000000   0x40009540         DC32     0x40009540

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_48:
   \   00000000   0x40009304         DC32     0x40009304

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_49:
   \   00000000   0x40009000         DC32     0x40009000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_50:
   \   00000000   0x40009140         DC32     0x40009140
    282          
    283          #if 0
    284          /*----------------------------------------------------------------------------------------------------------------------
    285          Function: SystemSleep
    286          
    287          Description:
    288          Puts the system into sleep mode. 
    289          
    290          TBD
    291          
    292          Requires:
    293            - TBD
    294          
    295          Promises:
    296            - Configures processor for maximum sleep while still allowing any required
    297              interrupt to wake it up.
    298          */
    299          void SystemSleep(void)
    300          {    
    301            /* Set the system control register for Sleep (but not Deep Sleep) */
    302             
    303             /* Set the sleep flag (cleared only in SysTick ISR */
    304             G_u32SystemFlags |= _SYSTEM_SLEEPING;
    305          
    306             while(NRF_TIMER1->EVENTS_COMPARE[0] == 0);
    307             NRF_TIMER1->EVENTS_COMPARE[0] = 0;
    308             
    309            /* Now sleep until an event wakes us up */
    310             //while(G_u32SystemFlags & _SYSTEM_SLEEPING)
    311             {
    312             }
    313          
    314            /* Clear the sleep mode status flags */
    315              
    316          } /* end SystemSleep(void) */
    317          #endif
    318          
    319          /*--------------------------------------------------------------------------------------------------------------------*/
    320          /* End of File */
    321          /*--------------------------------------------------------------------------------------------------------------------*/
    322          
    323          
    324          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   ClockSetup
       0   GpioSetup
       0   InterruptSetup
      20   NVIC_SetPriority
       0   PowerSetup
       8   SysTickSetup
         8   -> NVIC_SetPriority
       4   SystemSleep
       0   WatchDogSetup


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_19
       4  ??DataTable5_2
       4  ??DataTable5_20
       4  ??DataTable5_21
       4  ??DataTable5_22
       4  ??DataTable5_23
       4  ??DataTable5_24
       4  ??DataTable5_25
       4  ??DataTable5_26
       4  ??DataTable5_27
       4  ??DataTable5_28
       4  ??DataTable5_29
       4  ??DataTable5_3
       4  ??DataTable5_30
       4  ??DataTable5_31
       4  ??DataTable5_32
       4  ??DataTable5_33
       4  ??DataTable5_34
       4  ??DataTable5_35
       4  ??DataTable5_36
       4  ??DataTable5_37
       4  ??DataTable5_38
       4  ??DataTable5_39
       4  ??DataTable5_4
       4  ??DataTable5_40
       4  ??DataTable5_41
       4  ??DataTable5_42
       4  ??DataTable5_43
       4  ??DataTable5_44
       4  ??DataTable5_45
       4  ??DataTable5_46
       4  ??DataTable5_47
       4  ??DataTable5_48
       4  ??DataTable5_49
       4  ??DataTable5_5
       4  ??DataTable5_50
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      94  ClockSetup
       4  G_u32SystemTime1ms
       4  G_u32SystemTime1s
     188  GpioSetup
       2  InterruptSetup
     138  NVIC_SetPriority
      14  PowerSetup
      70  SysTickSetup
      32  SystemSleep
       2  WatchDogSetup

 
   8 bytes in section .bss
 748 bytes in section .text
 
 748 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
