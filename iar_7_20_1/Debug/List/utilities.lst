###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        28/May/2018  09:17:43
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\bsp\utilities.c
#    Command line =  
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\bsp\utilities.c
#        -lC
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\Debug\List\
#        -o
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\bsp\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\application\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk4_2_2\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk4_2_2\Include\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk4_2_2\Include\ant\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk4_2_2\Include\app_common\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk4_2_2\Source\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk4_2_2\Source\app_common\
#        -On -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\Debug\List\utilities.lst
#    Object file  =  
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\Debug\Obj\utilities.o
#
###############################################################################

C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\bsp\utilities.c
      1          /***********************************************************************************************************************
      2          File: utilities.c                                                                
      3          
      4          Description:
      5          Various useful functions.
      6          ***********************************************************************************************************************/
      7          
      8          #include "configuration.h"
      9          
     10          /***********************************************************************************************************************
     11          Global variable definitions with scope across entire project.
     12          All Global variable names shall start with "G_"
     13          ***********************************************************************************************************************/
     14          /* New variables */

   \                                 In section .data, align 4
     15          u8 G_au8MessageOK[]   = MESSAGE_OK;            /* Common "OK" message */
   \                     G_au8MessageOK:
   \   00000000   0x4F 0x4B          DC8 "OK\015\012"
   \              0x0D 0x0A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .data, align 4
     16          u8 G_au8MessageFAIL[] = MESSAGE_FAIL;          /* Common "FAIL" message */
   \                     G_au8MessageFAIL:
   \   00000000   0x46 0x41          DC8 "FAIL\015\012"
   \              0x49 0x4C    
   \              0x0D 0x0A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .data, align 4
     17          u8 G_au8MessageON[]   = MESSAGE_ON;            /* Common "ON" message */
   \                     G_au8MessageON:
   \   00000000   0x4F 0x4E          DC8 "ON\015\012"
   \              0x0D 0x0A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .data, align 4
     18          u8 G_au8MessageOFF[]  = MESSAGE_OFF;           /* Common "OFF" message */
   \                     G_au8MessageOFF:
   \   00000000   0x4F 0x46          DC8 "OFF\015\012"
   \              0x46 0x0D    
   \              0x0A 0x00    
   \   00000006   0x00 0x00          DC8 0, 0
     19          
     20          
     21          /*--------------------------------------------------------------------------------------------------------------------*/
     22          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     23          extern volatile u32 G_u32SystemTime1ms;        /* From scroll-ehw-ae.c */
     24          extern volatile u32 G_u32SystemTime1s;         /* From scroll-ehw-ae.c */
     25          
     26          extern volatile u32 G_u32SystemFlags;          /* From main.c */
     27          extern volatile u32 G_u32ApplicationFlags;     /* From main.c */
     28          
     29          
     30          /***********************************************************************************************************************
     31          Global variable definitions with scope limited to this local application.
     32          Variable names shall start with "Util_" and be declared as static.
     33          ***********************************************************************************************************************/
     34          
     35          
     36          /***********************************************************************************************************************
     37          Function Definitions
     38          ***********************************************************************************************************************/
     39          /*--------------------------------------------------------------------------------------------------------------------*/
     40          /* Public Functions */
     41          /*--------------------------------------------------------------------------------------------------------------------*/
     42          
     43          /*----------------------------------------------------------------------------
     44          Function: IsTimeUp
     45            
     46          Description:
     47          Checks if the difference between the current time and the saved time is greater
     48          than the period specified. The referenced current time is always G_u32SystemTime1ms.
     49          
     50          Requires:
     51            - *pu32SavedTick_ points to the saved tick value (in ms)
     52            - u32Period_ is the desired period in ms
     53          
     54          Promises:
     55            - Returns false if u32Period_ has not elapsed
     56            - Returns true if u32Period_ has elapsed
     57          */

   \                                 In section .text, align 2, keep-with-next
     58          bool IsTimeUp(u32 *pu32SavedTick_, u32 u32Period_)
     59          {
   \                     IsTimeUp: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0002             MOVS     R2,R0
     60            u32 u32TimeElapsed;
     61            
     62            /* Check to see if the timer in question has rolled */
     63            if(G_u32SystemTime1ms >= *pu32SavedTick_)
   \   00000004   0x....             LDR      R0,??DataTable1
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x6814             LDR      R4,[R2, #+0]
   \   0000000A   0x42A0             CMP      R0,R4
   \   0000000C   0xD305             BCC      ??IsTimeUp_0
     64            {
     65              u32TimeElapsed = G_u32SystemTime1ms - *pu32SavedTick_;
   \   0000000E   0x....             LDR      R0,??DataTable1
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x6814             LDR      R4,[R2, #+0]
   \   00000014   0x1B00             SUBS     R0,R0,R4
   \   00000016   0x0003             MOVS     R3,R0
   \   00000018   0xE007             B        ??IsTimeUp_1
     66            }
     67            else
     68            {
     69              u32TimeElapsed = (0xFFFFFFFF - *pu32SavedTick_) + G_u32SystemTime1ms;
   \                     ??IsTimeUp_0: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x43C0             MVNS     R0,R0            ;; #-1
   \   0000001E   0x6814             LDR      R4,[R2, #+0]
   \   00000020   0x1B00             SUBS     R0,R0,R4
   \   00000022   0x....             LDR      R4,??DataTable1
   \   00000024   0x6824             LDR      R4,[R4, #+0]
   \   00000026   0x1900             ADDS     R0,R0,R4
   \   00000028   0x0003             MOVS     R3,R0
     70            }
     71          
     72            /* Now determine if time is up */
     73            if(u32TimeElapsed < u32Period_)
   \                     ??IsTimeUp_1: (+1)
   \   0000002A   0x428B             CMP      R3,R1
   \   0000002C   0xD201             BCS      ??IsTimeUp_2
     74            {
     75              return(false);
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xE000             B        ??IsTimeUp_3
     76            }
     77            else
     78            {
     79              return(true);
   \                     ??IsTimeUp_2: (+1)
   \   00000032   0x2001             MOVS     R0,#+1
   \                     ??IsTimeUp_3: (+1)
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
     80            }
     81          
     82          } /* end IsTimeUp() */
     83          
     84          
     85          /*-----------------------------------------------------------------------------/
     86          Function: ASCIIHexCharToChar
     87          
     88          Description:
     89          Determines the numerical value of a hexidecimal ASCII char of that number
     90          ('0' - 'F' or '0' - 'f' -> 0 - 15).
     91          
     92          Requires:
     93            - Standard ASCII table is in use
     94           
     95          Promises:
     96            - If valid 0-9, A-F or a-f, returns the numerical value of the ASCII char
     97            - Otherwise returns 0xff
     98          */

   \                                 In section .text, align 2, keep-with-next
     99          u8 ASCIIHexCharToChar(u8 u8Char_)
    100          {
   \                     ASCIIHexCharToChar: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0001             MOVS     R1,R0
    101            if( (u8Char_ >= '0') && (u8Char_ <= '9') )
   \   00000004   0xB2C9             UXTB     R1,R1
   \   00000006   0x2930             CMP      R1,#+48
   \   00000008   0xDB06             BLT      ??ASCIIHexCharToChar_0
   \   0000000A   0xB2C9             UXTB     R1,R1
   \   0000000C   0x293A             CMP      R1,#+58
   \   0000000E   0xDA03             BGE      ??ASCIIHexCharToChar_0
    102              return(u8Char_ - NUMBER_ASCII_TO_DEC);
   \   00000010   0x3930             SUBS     R1,R1,#+48
   \   00000012   0x0008             MOVS     R0,R1
   \   00000014   0xB2C0             UXTB     R0,R0
   \   00000016   0xE014             B        ??ASCIIHexCharToChar_1
    103                 
    104            if( (u8Char_ >= 'A') && (u8Char_ <= 'F') )
   \                     ??ASCIIHexCharToChar_0: (+1)
   \   00000018   0xB2C9             UXTB     R1,R1
   \   0000001A   0x2941             CMP      R1,#+65
   \   0000001C   0xDB06             BLT      ??ASCIIHexCharToChar_2
   \   0000001E   0xB2C9             UXTB     R1,R1
   \   00000020   0x2947             CMP      R1,#+71
   \   00000022   0xDA03             BGE      ??ASCIIHexCharToChar_2
    105              return(u8Char_ - UPPERCASE_ASCII_TO_DEC);
   \   00000024   0x3937             SUBS     R1,R1,#+55
   \   00000026   0x0008             MOVS     R0,R1
   \   00000028   0xB2C0             UXTB     R0,R0
   \   0000002A   0xE00A             B        ??ASCIIHexCharToChar_1
    106            
    107            if( (u8Char_ >= 'a') && (u8Char_ <= 'f') )
   \                     ??ASCIIHexCharToChar_2: (+1)
   \   0000002C   0xB2C9             UXTB     R1,R1
   \   0000002E   0x2961             CMP      R1,#+97
   \   00000030   0xDB06             BLT      ??ASCIIHexCharToChar_3
   \   00000032   0xB2C9             UXTB     R1,R1
   \   00000034   0x2967             CMP      R1,#+103
   \   00000036   0xDA03             BGE      ??ASCIIHexCharToChar_3
    108              return(u8Char_ - LOWERCASE_ASCII_TO_DEC);
   \   00000038   0x3957             SUBS     R1,R1,#+87
   \   0000003A   0x0008             MOVS     R0,R1
   \   0000003C   0xB2C0             UXTB     R0,R0
   \   0000003E   0xE000             B        ??ASCIIHexCharToChar_1
    109            
    110            return(0xff);
   \                     ??ASCIIHexCharToChar_3: (+1)
   \   00000040   0x20FF             MOVS     R0,#+255
   \                     ??ASCIIHexCharToChar_1: (+1)
   \   00000042   0xBD00             POP      {PC}             ;; return
    111          
    112          } /* end ASCIIHexChartoChar */
    113          
    114          
    115          /*-----------------------------------------------------------------------------/
    116          Function: HexToASCIICharUpper
    117          
    118          Description:
    119          Determines the ASCII char of a single digit number
    120          0 - 15 -> '0' - 'F'
    121          
    122          Requires:
    123            - Standard ASCII table is in use
    124           
    125          Promises:
    126            - If valid 0-15, returns the corresponding ASCII hex char 0-9, A-F
    127            - Otherwise returns 0xff
    128          */

   \                                 In section .text, align 2, keep-with-next
    129          u8 HexToASCIICharUpper(u8 u8Char_)
    130          {
   \                     HexToASCIICharUpper: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0002             MOVS     R2,R0
    131            u8 u8ReturnValue = 0xFF;
   \   00000004   0x20FF             MOVS     R0,#+255
    132            
    133            if( u8Char_ <= 9 )
   \   00000006   0xB2D2             UXTB     R2,R2
   \   00000008   0x2A0A             CMP      R2,#+10
   \   0000000A   0xDA03             BGE      ??HexToASCIICharUpper_0
    134            {
    135              u8ReturnValue = u8Char_ + NUMBER_ASCII_TO_DEC;
   \   0000000C   0x0011             MOVS     R1,R2
   \   0000000E   0x3130             ADDS     R1,R1,#+48
   \   00000010   0x0008             MOVS     R0,R1
   \   00000012   0xE008             B        ??HexToASCIICharUpper_1
    136            }
    137            
    138            else if( (u8Char_ >= 10) && (u8Char_ <= 15) )
   \                     ??HexToASCIICharUpper_0: (+1)
   \   00000014   0xB2D2             UXTB     R2,R2
   \   00000016   0x2A0A             CMP      R2,#+10
   \   00000018   0xDB05             BLT      ??HexToASCIICharUpper_1
   \   0000001A   0xB2D2             UXTB     R2,R2
   \   0000001C   0x2A10             CMP      R2,#+16
   \   0000001E   0xDA02             BGE      ??HexToASCIICharUpper_1
    139            {
    140              u8ReturnValue = u8Char_ + UPPERCASE_ASCII_TO_DEC;
   \   00000020   0x0011             MOVS     R1,R2
   \   00000022   0x3137             ADDS     R1,R1,#+55
   \   00000024   0x0008             MOVS     R0,R1
    141            }
    142            
    143            return(u8ReturnValue);
   \                     ??HexToASCIICharUpper_1: (+1)
   \   00000026   0xB2C0             UXTB     R0,R0
   \   00000028   0xBD00             POP      {PC}             ;; return
    144          
    145          } /* end HexToASCIICharUpper */
    146          
    147          
    148          /*-----------------------------------------------------------------------------/
    149          Function: HexToASCIICharLower
    150          
    151          Description:
    152          Determines the ASCII char of a single digit number
    153          0 - 15 -> '0' - 'f'
    154          
    155          Requires:
    156            - Standard ASCII table is in use
    157           
    158          Promises:
    159            - If valid 0-15, returns the corresponding ASCII hex char 0-9, a-f
    160            - Otherwise returns 0xFF
    161          */

   \                                 In section .text, align 2, keep-with-next
    162          u8 HexToASCIICharLower(u8 u8Char_)
    163          {
   \                     HexToASCIICharLower: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0002             MOVS     R2,R0
    164            u8 u8ReturnValue = 0xFF;
   \   00000004   0x20FF             MOVS     R0,#+255
    165            
    166            if( u8Char_ <= 9 )
   \   00000006   0xB2D2             UXTB     R2,R2
   \   00000008   0x2A0A             CMP      R2,#+10
   \   0000000A   0xDA03             BGE      ??HexToASCIICharLower_0
    167            {
    168              u8ReturnValue = u8Char_ + NUMBER_ASCII_TO_DEC;
   \   0000000C   0x0011             MOVS     R1,R2
   \   0000000E   0x3130             ADDS     R1,R1,#+48
   \   00000010   0x0008             MOVS     R0,R1
   \   00000012   0xE008             B        ??HexToASCIICharLower_1
    169            }
    170            
    171            else if( (u8Char_ >= 10) && (u8Char_ <= 15) )
   \                     ??HexToASCIICharLower_0: (+1)
   \   00000014   0xB2D2             UXTB     R2,R2
   \   00000016   0x2A0A             CMP      R2,#+10
   \   00000018   0xDB05             BLT      ??HexToASCIICharLower_1
   \   0000001A   0xB2D2             UXTB     R2,R2
   \   0000001C   0x2A10             CMP      R2,#+16
   \   0000001E   0xDA02             BGE      ??HexToASCIICharLower_1
    172            {
    173              u8ReturnValue = u8Char_ + LOWERCASE_ASCII_TO_DEC;
   \   00000020   0x0011             MOVS     R1,R2
   \   00000022   0x3157             ADDS     R1,R1,#+87
   \   00000024   0x0008             MOVS     R0,R1
    174            }
    175            
    176            return(u8ReturnValue);
   \                     ??HexToASCIICharLower_1: (+1)
   \   00000026   0xB2C0             UXTB     R0,R0
   \   00000028   0xBD00             POP      {PC}             ;; return
    177          
    178          } /* end HexToASCIICharLower */
    179          
    180          
    181          /*-----------------------------------------------------------------------------/
    182          Function: NumberToAscii
    183          
    184          Description:
    185          Converts a long into an ASCII string.  Maximum of 10 digits + NULL.
    186          
    187          Requires:
    188            - u32Number_ is the number to convert
    189            - *pu8AsciiString_ points to the destination string location
    190           
    191          Promises:
    192            - Null-terminated string of the number is loaded to pu8AsciiString_
    193            - Returns the number of digits
    194          */

   \                                 In section .text, align 2, keep-with-next
    195          u8 NumberToAscii(u32 u32Number_, u8* pu8AsciiString_)
    196          {
   \                     NumberToAscii: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0006             MOVS     R6,R0
    197            bool bFoundDigit = false;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x4669             MOV      R1,SP
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
    198            u8 au8AsciiNumber[11];
    199            u8 u8CharCount = 0;
   \   0000000C   0x2500             MOVS     R5,#+0
    200            u32 u32Divider = 1000000000;
   \   0000000E   0x....             LDR      R4,??DataTable1_1  ;; 0x3b9aca00
    201            u8 u8Temp;
    202            
    203            /* Parse out all the digits, start counting after leading zeros */
    204            for(u8 i = 0; i < 10; i++)
   \   00000010   0x2700             MOVS     R7,#+0
   \                     ??NumberToAscii_0: (+1)
   \   00000012   0xB2FF             UXTB     R7,R7
   \   00000014   0x2F0A             CMP      R7,#+10
   \   00000016   0xDA23             BGE      ??NumberToAscii_1
    205            {
    206              u8Temp = (u32Number_ / u32Divider);
   \   00000018   0x0030             MOVS     R0,R6
   \   0000001A   0x0021             MOVS     R1,R4
   \   0000001C   0x.... 0x....      BL       __aeabi_uidiv
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x7048             STRB     R0,[R1, #+1]
    207              
    208              /* Check for first non-leading zero */
    209              if(u8Temp != 0)
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0x7840             LDRB     R0,[R0, #+1]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD002             BEQ      ??NumberToAscii_2
    210              {
    211                bFoundDigit = true;
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x4669             MOV      R1,SP
   \   00000030   0x7008             STRB     R0,[R1, #+0]
    212              }
    213          
    214              /* As long as a non-leading zero has been found, add the ASCII char */
    215              if(bFoundDigit)
   \                     ??NumberToAscii_2: (+1)
   \   00000032   0x4668             MOV      R0,SP
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD006             BEQ      ??NumberToAscii_3
    216              {
    217                au8AsciiNumber[u8CharCount] = u8Temp + 0x30;
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x7840             LDRB     R0,[R0, #+1]
   \   0000003E   0x3030             ADDS     R0,R0,#+48
   \   00000040   0xA901             ADD      R1,SP,#+4
   \   00000042   0xB2ED             UXTB     R5,R5
   \   00000044   0x5548             STRB     R0,[R1, R5]
    218                u8CharCount++;
   \   00000046   0x1C6D             ADDS     R5,R5,#+1
    219              }
    220              
    221              /* Update for next iteration */
    222              u32Number_ %= u32Divider;
   \                     ??NumberToAscii_3: (+1)
   \   00000048   0x0030             MOVS     R0,R6
   \   0000004A   0x0021             MOVS     R1,R4
   \   0000004C   0x.... 0x....      BL       __aeabi_uidivmod
   \   00000050   0x000E             MOVS     R6,R1
    223              u32Divider /= 10;
   \   00000052   0x0020             MOVS     R0,R4
   \   00000054   0x210A             MOVS     R1,#+10
   \   00000056   0x.... 0x....      BL       __aeabi_uidiv
   \   0000005A   0x0004             MOVS     R4,R0
    224            }
   \   0000005C   0x1C7F             ADDS     R7,R7,#+1
   \   0000005E   0xE7D8             B        ??NumberToAscii_0
    225            
    226            /* Handle special case where u32Number == 0 */
    227            if(!bFoundDigit)
   \                     ??NumberToAscii_1: (+1)
   \   00000060   0x4668             MOV      R0,SP
   \   00000062   0x7800             LDRB     R0,[R0, #+0]
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD104             BNE      ??NumberToAscii_4
    228            {
    229              u8CharCount = 1;
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0x0005             MOVS     R5,R0
    230              au8AsciiNumber[0] = '0';
   \   0000006C   0x2030             MOVS     R0,#+48
   \   0000006E   0x4669             MOV      R1,SP
   \   00000070   0x7108             STRB     R0,[R1, #+4]
    231            }
    232            
    233            /* Add the null and copy to destination */
    234            au8AsciiNumber[u8CharCount] = NULL;
   \                     ??NumberToAscii_4: (+1)
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0xA901             ADD      R1,SP,#+4
   \   00000076   0xB2ED             UXTB     R5,R5
   \   00000078   0x5548             STRB     R0,[R1, R5]
    235            strcpy((char *)pu8AsciiString_, (const char*)au8AsciiNumber);
   \   0000007A   0xA901             ADD      R1,SP,#+4
   \   0000007C   0x9804             LDR      R0,[SP, #+16]
   \   0000007E   0x.... 0x....      BL       strcpy
    236            
    237            return(u8CharCount);
   \   00000082   0x0028             MOVS     R0,R5
   \   00000084   0xB2C0             UXTB     R0,R0
   \   00000086   0xB005             ADD      SP,SP,#+20
   \   00000088   0xBDF0             POP      {R4-R7,PC}       ;; return
    238          
    239          } /* end NumberToAscii() */
    240          
    241          
    242          /*-----------------------------------------------------------------------------/
    243          Function: SearchString
    244          
    245          Description:
    246          Searches a string for another string.  Finds only an exact match of the string (case sensitive).
    247          Character following matched string must be space, <CR> or <LF>.
    248          
    249          Requires:
    250            - Standard ASCII table is in use
    251            - pu8TargetString_ points to the start of a NULL, <CR> or <LF> terminated string to search
    252            - pu8MatchString_ points to the start of a NULL, <CR> or <LF> terminated string to be found in pu8TargetString_
    253           
    254          Promises:
    255            - Returns true if the string is found
    256          */

   \                                 In section .text, align 2, keep-with-next
    257          bool SearchString(u8* pu8TargetString_, u8* pu8MatchString_)
    258          {
   \                     SearchString: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x0002             MOVS     R2,R0
    259            u8* pu8MatchChar = pu8MatchString_;
   \   00000004   0x000B             MOVS     R3,R1
    260            u8* pu8TargetChar = pu8TargetString_;
   \   00000006   0x0014             MOVS     R4,R2
    261            
    262            do
    263            {
    264              /* Scan for the current character of pu8MatchString_ in pu8TargetString_ */
    265              while( (*pu8MatchChar != *pu8TargetChar) && (*pu8TargetChar != NULL) && 
    266                     (*pu8TargetChar != ASCII_LINEFEED) && (*pu8TargetChar != ASCII_CARRIAGE_RETURN) )
   \                     ??SearchString_0: (+1)
   \   00000008   0x7818             LDRB     R0,[R3, #+0]
   \   0000000A   0x7825             LDRB     R5,[R4, #+0]
   \   0000000C   0x42A8             CMP      R0,R5
   \   0000000E   0xD00A             BEQ      ??SearchString_1
   \   00000010   0x7820             LDRB     R0,[R4, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD007             BEQ      ??SearchString_1
   \   00000016   0x7820             LDRB     R0,[R4, #+0]
   \   00000018   0x280A             CMP      R0,#+10
   \   0000001A   0xD004             BEQ      ??SearchString_1
   \   0000001C   0x7820             LDRB     R0,[R4, #+0]
   \   0000001E   0x280D             CMP      R0,#+13
   \   00000020   0xD001             BEQ      ??SearchString_1
    267              {
    268                pu8TargetChar++;
   \   00000022   0x1C64             ADDS     R4,R4,#+1
   \   00000024   0xE7F0             B        ??SearchString_0
    269              }
    270              
    271              /* Exit if we're at the end of the target string */
    272              if( (*pu8TargetChar == NULL) || 
    273                  (*pu8TargetChar == ASCII_LINEFEED) || (*pu8TargetChar == ASCII_CARRIAGE_RETURN) )
   \                     ??SearchString_1: (+1)
   \   00000026   0x7820             LDRB     R0,[R4, #+0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD005             BEQ      ??SearchString_2
   \   0000002C   0x7820             LDRB     R0,[R4, #+0]
   \   0000002E   0x280A             CMP      R0,#+10
   \   00000030   0xD002             BEQ      ??SearchString_2
   \   00000032   0x7820             LDRB     R0,[R4, #+0]
   \   00000034   0x280D             CMP      R0,#+13
   \   00000036   0xD101             BNE      ??SearchString_3
    274              {
    275                return(false);
   \                     ??SearchString_2: (+1)
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE032             B        ??SearchString_4
    276              }
    277              
    278              /* If we found a match, look for next char */
    279              while ( *pu8MatchChar == *pu8TargetChar )
   \                     ??SearchString_3: (+1)
   \   0000003C   0x7818             LDRB     R0,[R3, #+0]
   \   0000003E   0x7825             LDRB     R5,[R4, #+0]
   \   00000040   0x42A8             CMP      R0,R5
   \   00000042   0xD118             BNE      ??SearchString_5
    280              {
    281                pu8MatchChar++;
   \   00000044   0x1C5B             ADDS     R3,R3,#+1
    282                pu8TargetChar++;
   \   00000046   0x1C64             ADDS     R4,R4,#+1
    283                
    284                /* At the end of the match string? */
    285                if( (*pu8MatchChar == NULL) || (*pu8MatchChar == ASCII_LINEFEED) || (*pu8MatchChar == ASCII_CARRIAGE_RETURN) )
   \   00000048   0x7818             LDRB     R0,[R3, #+0]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD005             BEQ      ??SearchString_6
   \   0000004E   0x7818             LDRB     R0,[R3, #+0]
   \   00000050   0x280A             CMP      R0,#+10
   \   00000052   0xD002             BEQ      ??SearchString_6
   \   00000054   0x7818             LDRB     R0,[R3, #+0]
   \   00000056   0x280D             CMP      R0,#+13
   \   00000058   0xD1F0             BNE      ??SearchString_3
    286                {
    287                  /* Check if the next character in pu8TargetChar is space, <CR>, <LF> or ':' */
    288                  if( (*pu8TargetChar == ' ') ||
    289                      (*pu8TargetChar == ASCII_CARRIAGE_RETURN) ||
    290                      (*pu8TargetChar == ASCII_LINEFEED) ||
    291                      (*pu8TargetChar == ':')  )
   \                     ??SearchString_6: (+1)
   \   0000005A   0x7820             LDRB     R0,[R4, #+0]
   \   0000005C   0x2820             CMP      R0,#+32
   \   0000005E   0xD008             BEQ      ??SearchString_7
   \   00000060   0x7820             LDRB     R0,[R4, #+0]
   \   00000062   0x280D             CMP      R0,#+13
   \   00000064   0xD005             BEQ      ??SearchString_7
   \   00000066   0x7820             LDRB     R0,[R4, #+0]
   \   00000068   0x280A             CMP      R0,#+10
   \   0000006A   0xD002             BEQ      ??SearchString_7
   \   0000006C   0x7820             LDRB     R0,[R4, #+0]
   \   0000006E   0x283A             CMP      R0,#+58
   \   00000070   0xD1E4             BNE      ??SearchString_3
    292                  {
    293                    return(true);
   \                     ??SearchString_7: (+1)
   \   00000072   0x2001             MOVS     R0,#+1
   \   00000074   0xE015             B        ??SearchString_4
    294                  }
    295                }
    296              }
    297          
    298              /* At the end of the target string? */
    299              if( (*pu8TargetChar == NULL) || (*pu8TargetChar == ASCII_LINEFEED) || (*pu8TargetChar == ASCII_CARRIAGE_RETURN) )
   \                     ??SearchString_5: (+1)
   \   00000076   0x7820             LDRB     R0,[R4, #+0]
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD005             BEQ      ??SearchString_8
   \   0000007C   0x7820             LDRB     R0,[R4, #+0]
   \   0000007E   0x280A             CMP      R0,#+10
   \   00000080   0xD002             BEQ      ??SearchString_8
   \   00000082   0x7820             LDRB     R0,[R4, #+0]
   \   00000084   0x280D             CMP      R0,#+13
   \   00000086   0xD101             BNE      ??SearchString_9
    300              {
    301                return(false);
   \                     ??SearchString_8: (+1)
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0xE00A             B        ??SearchString_4
    302              }
    303              
    304              /* If here, match was not found (yet), but as long as there are more characters in pu8TargetChar,
    305              then we can scan again. */
    306              
    307              /* Reset match pointer back to the start of its string */
    308              pu8MatchChar = pu8MatchString_;
   \                     ??SearchString_9: (+1)
   \   0000008C   0x000B             MOVS     R3,R1
    309            } while ( (*pu8TargetChar != NULL) && 
    310                      (*pu8TargetChar != ASCII_LINEFEED) && (*pu8TargetChar != ASCII_CARRIAGE_RETURN) );
   \   0000008E   0x7820             LDRB     R0,[R4, #+0]
   \   00000090   0x2800             CMP      R0,#+0
   \   00000092   0xD005             BEQ      ??SearchString_10
   \   00000094   0x7820             LDRB     R0,[R4, #+0]
   \   00000096   0x280A             CMP      R0,#+10
   \   00000098   0xD002             BEQ      ??SearchString_10
   \   0000009A   0x7820             LDRB     R0,[R4, #+0]
   \   0000009C   0x280D             CMP      R0,#+13
   \   0000009E   0xD1B3             BNE      ??SearchString_0
    311            
    312            /* If we get here, no match was found */
    313            return(false);
   \                     ??SearchString_10: (+1)
   \   000000A0   0x2000             MOVS     R0,#+0
   \                     ??SearchString_4: (+1)
   \   000000A2   0xBD30             POP      {R4,R5,PC}       ;; return
    314          
    315          } /* end SearchString */

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     G_u32SystemTime1ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x3B9ACA00         DC32     0x3b9aca00
    316          
    317          /*--------------------------------------------------------------------------------------------------------------------*/
    318          /* Protected Functions */
    319          /*--------------------------------------------------------------------------------------------------------------------*/
    320          
    321          /*--------------------------------------------------------------------------------------------------------------------*/
    322          /* Private functions */
    323          /*--------------------------------------------------------------------------------------------------------------------*/
    324          
    325          
    326          
    327          
    328          /*--------------------------------------------------------------------------------------------------------------------*/
    329          /* End of File */
    330          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   ASCIIHexCharToChar
       4   HexToASCIICharLower
       4   HexToASCIICharUpper
       8   IsTimeUp
      40   NumberToAscii
        40   -> strcpy
        40 __aeabi_uidiv
        40 __aeabi_uidivmod
      12   SearchString


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
      68  ASCIIHexCharToChar
       8  G_au8MessageFAIL
       8  G_au8MessageOFF
       8  G_au8MessageOK
       8  G_au8MessageON
      42  HexToASCIICharLower
      42  HexToASCIICharUpper
      54  IsTimeUp
     138  NumberToAscii
     164  SearchString

 
  32 bytes in section .data
 516 bytes in section .text
 
 516 bytes of CODE memory
  32 bytes of DATA memory

Errors: none
Warnings: none
