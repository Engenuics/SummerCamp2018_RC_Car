###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        30/May/2018  11:07:38
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\ENGENUICS5\Desktop\ANTTT-Jason\application\main.c
#    Command line =  
#        C:\Users\ENGENUICS5\Desktop\ANTTT-Jason\application\main.c -D NRF51
#        -lC C:\Users\ENGENUICS5\Desktop\ANTTT-Jason\iar_7_20_1\Debug\List\ -o
#        C:\Users\ENGENUICS5\Desktop\ANTTT-Jason\iar_7_20_1\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\ENGENUICS5\Desktop\ANTTT-Jason\iar_7_20_1\..\bsp\ -I
#        C:\Users\ENGENUICS5\Desktop\ANTTT-Jason\iar_7_20_1\..\application\ -I
#        C:\Users\ENGENUICS5\Desktop\ANTTT-Jason\iar_7_20_1\..\nordic_sdk6_1_0\
#        -I
#        C:\Users\ENGENUICS5\Desktop\ANTTT-Jason\iar_7_20_1\..\nordic_sdk6_1_0\Include\
#        -I
#        C:\Users\ENGENUICS5\Desktop\ANTTT-Jason\iar_7_20_1\..\nordic_sdk6_1_0\Include\s310\
#        -I
#        C:\Users\ENGENUICS5\Desktop\ANTTT-Jason\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\
#        -I
#        C:\Users\ENGENUICS5\Desktop\ANTTT-Jason\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\ble_services\
#        -I
#        C:\Users\ENGENUICS5\Desktop\ANTTT-Jason\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\device_manager\
#        -I
#        C:\Users\ENGENUICS5\Desktop\ANTTT-Jason\iar_7_20_1\..\nordic_sdk6_1_0\Include\app_common\
#        -On --require_prototypes -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\ENGENUICS5\Desktop\ANTTT-Jason\iar_7_20_1\Debug\List\main.lst
#    Object file  =  
#        C:\Users\ENGENUICS5\Desktop\ANTTT-Jason\iar_7_20_1\Debug\Obj\main.o
#
###############################################################################

C:\Users\ENGENUICS5\Desktop\ANTTT-Jason\application\main.c
      1          /***********************************************************************************************************************
      2          File: main.c                                                                
      3          
      4          Description:
      5          Container for the nRF51422 firmware.  
      6          ***********************************************************************************************************************/
      7          
      8          #include "configuration.h"
      9          
     10          /***********************************************************************************************************************
     11          Global variable definitions with scope across entire project.
     12          All Global variable names shall start with "G_"
     13          ***********************************************************************************************************************/
     14          /* New variables */

   \                                 In section .bss, align 4
     15          volatile u32 G_u32SystemFlags = 0;                     /* Global system flags */
   \                     G_u32SystemFlags:
   \   00000000                      DS8 4
     16          
     17          /*--------------------------------------------------------------------------------------------------------------------*/
     18          /* External global variables defined in other files (must indicate which file they are defined in) */
     19          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     20          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     21          
     22          extern fnCode_type ANTTT_SM;
     23          
     24          /***********************************************************************************************************************
     25          Global variable definitions with scope limited to this local application.
     26          Variable names shall start with "Main_" and be declared as static.
     27          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     28          u32 Main_u32ErrorCode;
   \                     Main_u32ErrorCode:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
     29          u8 Main_u8TestMessage[] = "9876 test message from ANT";
   \                     Main_u8TestMessage:
   \   00000000   0x39 0x38          DC8 "9876 test message from ANT"
   \              0x37 0x36    
   \              0x20 0x74    
   \              0x65 0x73    
   \              0x74 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x20 0x41    
   \              0x4E 0x54    
   \              0x00         
   \   0000001B   0x00               DC8 0
     30          
     31          /***********************************************************************************************************************
     32          Function Definitions
     33          ***********************************************************************************************************************/
     34          
     35          /***********************************************************************************************************************
     36          Main Program
     37          Main has two sections:
     38          
     39          1. Initialization which is run once on power-up or reset.  All drivers and applications are setup here without timing
     40          contraints but must complete execution regardless of success or failure of starting the application. 
     41          
     42          2. Main loop.  This is an event-driven system that sequentially executes tasks that require servicing in the event queue.
     43          
     44          ***********************************************************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     45          void main(void)
     46          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     47            G_u32SystemFlags |= _SYSTEM_INITIALIZING;
   \   00000002   0x481C             LDR      R0,??main_0
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2180             MOVS     R1,#+128
   \   00000008   0x0609             LSLS     R1,R1,#+24       ;; #-2147483648
   \   0000000A   0x4301             ORRS     R1,R1,R0
   \   0000000C   0x4819             LDR      R0,??main_0
   \   0000000E   0x6001             STR      R1,[R0, #+0]
     48            
     49            // Due to the switch that the application makes from the User mode system to SoftDevice
     50            // mode System, this module sets up the basic clocks and I/Os, followed by enabling the SD.
     51            // Once the SD is enabled, the application shall only use the SD provided system calls
     52          
     53            __disable_interrupt();
   \   00000010   0xB672             CPSID    I
     54          
     55            /* Clock, GPIO and SoftDevice setup */  
     56            ClockSetup();
   \   00000012   0x.... 0x....      BL       ClockSetup
     57            GpioSetup();
   \   00000016   0x.... 0x....      BL       GpioSetup
     58          
     59            __enable_interrupt();
   \   0000001A   0xB662             CPSIE    I
     60            
     61            // Enable the s310 SoftDevice Stack. If Failure, we shall not progress as 
     62            // successive code is dependent on SD success.
     63            if (!SocIntegrationInitialize())
   \   0000001C   0x.... 0x....      BL       SocIntegrationInitialize
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD103             BNE      ??main_1
     64            {
     65              /* Draw an X on the gameboard to indicate this state */
     66              NRF_GPIO->OUTSET = P0_20_LED_HOME_1 | P0_06_LED_HOME_5 | P0_22_LED_HOME_9 |
     67                                 P0_30_LED_HOME_3 | P0_10_LED_HOME_7;
   \   00000024   0x4814             LDR      R0,??main_0+0x4  ;; 0x40500440
   \   00000026   0x4915             LDR      R1,??main_0+0x8  ;; 0x50000508
   \   00000028   0x6008             STR      R0,[R1, #+0]
     68              while (1);
   \                     ??main_2: (+1)
   \   0000002A   0xE7FE             B        ??main_2
     69            }
     70            
     71            /* Low Level Initialization Modules */
     72            WatchDogSetup(); /* During development, set to not reset processor if timeout */
   \                     ??main_1: (+1)
   \   0000002C   0x.... 0x....      BL       WatchDogSetup
     73            SysTickSetup();
   \   00000030   0x.... 0x....      BL       SysTickSetup
     74            InterruptsInitialize();
   \   00000034   0x.... 0x....      BL       InterruptsInitialize
     75              
     76            /* Driver initialization */
     77            LedInitialize();
   \   00000038   0x.... 0x....      BL       LedInitialize
     78            ButtonInitialize();
   \   0000003C   0x.... 0x....      BL       ButtonInitialize
     79          
     80            ANTIntegrationInitialize();
   \   00000040   0x.... 0x....      BL       ANTIntegrationInitialize
     81            BLEIntegrationInitialize();
   \   00000044   0x.... 0x....      BL       BLEIntegrationInitialize
     82            bleperipheralInitialize();
   \   00000048   0x.... 0x....      BL       bleperipheralInitialize
     83            
     84            /* Application initialization */
     85            AntttInitialize();
   \   0000004C   0x.... 0x....      BL       AntttInitialize
     86            
     87            /* Exit initialization */
     88            G_u32SystemFlags &= ~_SYSTEM_INITIALIZING;
   \   00000050   0x4808             LDR      R0,??main_0
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x0040             LSLS     R0,R0,#+1        ;; ZeroExtS R0,R0,#+1,#+1
   \   00000056   0x0840             LSRS     R0,R0,#+1
   \   00000058   0x4906             LDR      R1,??main_0
   \   0000005A   0x6008             STR      R0,[R1, #+0]
     89            
     90            /* Main loop */  
     91            while(1)
     92            {
     93              SocIntegrationHandler();
   \                     ??main_3: (+1)
   \   0000005C   0x.... 0x....      BL       SocIntegrationHandler
     94              LedUpdate();
   \   00000060   0x.... 0x....      BL       LedUpdate
     95              
     96              /* State Machines */
     97              ANTTT_SM();
   \   00000064   0x4806             LDR      R0,??main_0+0xC
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x4780             BLX      R0
     98              ButtonRunActiveState();
   \   0000006A   0x.... 0x....      BL       ButtonRunActiveState
     99             
    100              /* System sleep*/
    101              SystemSleep();
   \   0000006E   0x.... 0x....      BL       SystemSleep
   \   00000072   0xE7F3             B        ??main_3
   \                     ??main_0:
   \   00000074   0x........         DC32     G_u32SystemFlags
   \   00000078   0x40500440         DC32     0x40500440
   \   0000007C   0x50000508         DC32     0x50000508
   \   00000080   0x........         DC32     ANTTT_SM
    102            } /* end while(1) main super loop */
    103            
    104          } /* end main() */
    105          
    106          
    107          
    108          
    109          /*--------------------------------------------------------------------------------------------------------------------*/
    110          /* End of File */
    111          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   main
         8   -- Indirect call
         8   -> ANTIntegrationInitialize
         8   -> AntttInitialize
         8   -> BLEIntegrationInitialize
         8   -> ButtonInitialize
         8   -> ButtonRunActiveState
         8   -> ClockSetup
         8   -> GpioSetup
         8   -> InterruptsInitialize
         8   -> LedInitialize
         8   -> LedUpdate
         8   -> SocIntegrationHandler
         8   -> SocIntegrationInitialize
         8   -> SysTickSetup
         8   -> SystemSleep
         8   -> WatchDogSetup
         8   -> bleperipheralInitialize


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  G_u32SystemFlags
       4  Main_u32ErrorCode
      28  Main_u8TestMessage
     132  main

 
   8 bytes in section .bss
  28 bytes in section .data
 132 bytes in section .text
 
 132 bytes of CODE memory
  36 bytes of DATA memory

Errors: none
Warnings: none
