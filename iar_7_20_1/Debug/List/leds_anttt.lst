###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        30/May/2018  13:45:45
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\bsp\leds_anttt.c
#    Command line =  
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\bsp\leds_anttt.c
#        -D NRF51 -lC
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\Debug\List\
#        -o
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\bsp\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\application\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk6_1_0\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk6_1_0\Include\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk6_1_0\Include\s310\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\ble_services\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\device_manager\
#        -I
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\..\nordic_sdk6_1_0\Include\app_common\
#        -On --require_prototypes -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\Debug\List\leds_anttt.lst
#    Object file  =  
#        C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\iar_7_20_1\Debug\Obj\leds_anttt.o
#
###############################################################################

C:\Users\ENGENUICS5\Documents\GitHub\SummerCamp2018_RC_Car\bsp\leds_anttt.c
      1          /***********************************************************************************************************************
      2          File: leds_anttt.c                                                                
      3          
      4          Description:
      5          LED driver that provides on, off, toggle, blink and PWM functionality.
      6          The basic on/off/toggle functionality is applied directly to the LEDs.
      7          Blinking and PWMing of LEDs rely on a 1ms system tick to provide timing at
      8          regular 1ms calls to LedUpdate().
      9          
     10          ------------------------------------------------------------------------------------------------------------------------
     11          API:
     12          
     13          Public:
     14          void LedOn(LedNumberType eLED_)
     15          void LedOff(LedNumberType eLED_)
     16          void LedToggle(LedNumberType eLED_)
     17          void LedPWM(LedNumberType eLED_, LedRateType ePwmRate_)
     18          void LedBlink(LedNumberType eLED_, LedRateType eBlinkRate_)
     19          
     20          Protected:
     21          void LedInitialize(void)
     22          
     23          ***********************************************************************************************************************/
     24          
     25          #include "configuration.h"
     26          
     27          
     28          /***********************************************************************************************************************
     29          Global variable definitions with scope across entire project.
     30          All Global variable names shall start with "G_xxLed"
     31          ***********************************************************************************************************************/
     32          /*--------------------------------------------------------------------------------------------------------------------*/
     33          /* New variables (all shall start with G_xxLed*/
     34          
     35          
     36          /*--------------------------------------------------------------------------------------------------------------------*/
     37          /* External global variables defined in other files (must indicate which file they are defined in) */
     38          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     39          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     40          
     41          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     42          
     43          
     44          /***********************************************************************************************************************
     45          Global variable definitions with scope limited to this local application.
     46          Variable names shall start with "Led_" and be declared as static.
     47          ***********************************************************************************************************************/
     48          /* LED locations: order must correspond to the order set in LedNumberType in the header file. */

   \                                 In section .data, align 4
     49          static u32 Led_au32BitPositions[] = {P0_20_LED_HOME_1, P0_17_LED_HOME_2, P0_30_LED_HOME_3, P0_12_LED_HOME_4, P0_06_LED_HOME_5, 
   \                     Led_au32BitPositions:
   \   00000000   0x00100000         DC32 1048576, 131072, 1073741824, 4096, 64, 536870912, 1024, 2, 4194304
   \              0x00020000   
   \              0x40000000   
   \              0x00001000   
   \              0x00000040   
   \              0x20000000   
   \              0x00000400   
   \              0x00000002   
   \              0x00400000   
   \   00000024   0x00080000         DC32 524288, 262144, 268435456, 8192, 128, 2097152, 2048, 4, 16777216
   \              0x00040000   
   \              0x10000000   
   \              0x00002000   
   \              0x00000080   
   \              0x00200000   
   \              0x00000800   
   \              0x00000004   
   \              0x01000000   
   \   00000048   0x00000020         DC32 32, 16, 8
   \              0x00000010   
   \              0x00000008   
     50                                               P0_29_LED_HOME_6, P0_10_LED_HOME_7, P0_01_LED_HOME_8, P0_22_LED_HOME_9, 
     51                                               P0_19_LED_AWAY_1, P0_18_LED_AWAY_2, P0_28_LED_AWAY_3, P0_13_LED_AWAY_4, P0_07_LED_AWAY_5, 
     52                                               P0_21_LED_AWAY_6, P0_11_LED_AWAY_7, P0_02_LED_AWAY_8, P0_24_LED_AWAY_9,
     53                                               P0_05_LED_STATUS_RED, P0_04_LED_STATUS_YLW, P0_03_LED_STATUS_GRN};
     54          
     55          /* Control array for all LEDs in system initialized for LedInitialize().  Array values correspond to LedConfigType fields: 
     56               eMode         eRate      u16Count       eCurrentDuty     eActiveState     ePort      LedNumberType */

   \                                 In section .data, align 4
     57          static LedConfigType Leds_asLedArray[TOTAL_LEDS] = 
   \                     Leds_asLedArray:
   \   00000000   0x00 0x00          DC8 0, 0
   \   00000002   0x0014 0x0014      DC16 20, 20
   \   00000006   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000000A   0x0014 0x0014      DC16 20, 20
   \   0000000E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   00000012   0x0014 0x0014      DC16 20, 20
   \   00000016   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000001A   0x0014 0x0014      DC16 20, 20
   \   0000001E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   00000022   0x0014 0x0014      DC16 20, 20
   \   00000026   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000002A   0x0014 0x0014      DC16 20, 20
   \   0000002E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   00000032   0x0014 0x0014      DC16 20, 20
   \   00000036   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000003A   0x0014 0x0014      DC16 20, 20
   \   0000003E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   00000042   0x0014 0x0014      DC16 20, 20
   \   00000046   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000004A   0x0014 0x0014      DC16 20, 20
   \   0000004E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   00000052   0x0014 0x0014      DC16 20, 20
   \   00000056   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000005A   0x0014 0x0014      DC16 20, 20
   \   0000005E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   00000062   0x0014 0x0014      DC16 20, 20
   \   00000066   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000006A   0x0014 0x0014      DC16 20, 20
   \   0000006E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   00000072   0x0014 0x0014      DC16 20, 20
   \   00000076   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000007A   0x0014 0x0014      DC16 20, 20
   \   0000007E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   00000082   0x0014 0x0014      DC16 20, 20
   \   00000086   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000008A   0x0014 0x0014      DC16 20, 20
   \   0000008E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   00000092   0x0014 0x0014      DC16 20, 20
   \   00000096   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   0000009A   0x0014 0x0014      DC16 20, 20
   \   0000009E   0x01 0x01          DC8 1, 1, 0, 0
   \              0x00 0x00    
   \   000000A2   0x0014 0x0014      DC16 20, 20
   \   000000A6   0x01 0x01          DC8 1, 1
     58          {
     59           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*        */
     60           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*       */
     61           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*         */
     62           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*         */
     63           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*         */
     64           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*         */
     65           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*         */
     66           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*         */
     67           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*         */
     68           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*         */
     69           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*        */
     70           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*        */
     71           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*       */
     72           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*       */
     73           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*        */
     74           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*       */
     75           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*        */
     76           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*       */
     77           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*        */
     78           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*       */
     79           {LED_NORMAL_MODE, LED_PWM_100, LED_PWM_100, LED_PWM_DUTY_HIGH, LED_ACTIVE_HIGH}, /*        */
     80          };   
     81           
     82          
     83          /***********************************************************************************************************************
     84          * Function Definitions
     85          ***********************************************************************************************************************/
     86          
     87          /*--------------------------------------------------------------------------------------------------------------------*/
     88          /* Public functions */
     89          /*--------------------------------------------------------------------------------------------------------------------*/
     90          
     91          /*----------------------------------------------------------------------------------------------------------------------
     92          Function: LedOn
     93          
     94          Description:
     95          Turn the specified LED on.  Automatically takes care of the active low vs. active
     96          high LEDs.  
     97          
     98          Requires:
     99            - eLED_ is a valid LED index
    100            - Definitions in Leds_asLedArray[eLED_] are correct
    101            - Supports port 0 GPIO only
    102          
    103          Promises:
    104            - Requested LED is turned on 
    105            - Requested LED is always set to LED_NORMAL_MODE mode
    106          */

   \                                 In section .text, align 2, keep-with-next
    107          void LedOn(LedNumberType eLED_)
    108          {
   \                     LedOn: (+1)
   \   00000000   0xB500             PUSH     {LR}
    109          
    110            if(Leds_asLedArray[eLED_].eActiveState == LED_ACTIVE_HIGH)
   \   00000002   0x....             LDR      R1,??DataTable6
   \   00000004   0xB2C0             UXTB     R0,R0
   \   00000006   0x2208             MOVS     R2,#+8
   \   00000008   0x4342             MULS     R2,R0,R2
   \   0000000A   0x1889             ADDS     R1,R1,R2
   \   0000000C   0x79C9             LDRB     R1,[R1, #+7]
   \   0000000E   0x2901             CMP      R1,#+1
   \   00000010   0xD107             BNE      ??LedOn_0
    111            {
    112              NRF_GPIO->OUTSET = Led_au32BitPositions[eLED_];
   \   00000012   0x....             LDR      R1,??DataTable6_1
   \   00000014   0xB2C0             UXTB     R0,R0
   \   00000016   0x2204             MOVS     R2,#+4
   \   00000018   0x4342             MULS     R2,R0,R2
   \   0000001A   0x5889             LDR      R1,[R1, R2]
   \   0000001C   0x....             LDR      R2,??DataTable6_2  ;; 0x50000508
   \   0000001E   0x6011             STR      R1,[R2, #+0]
   \   00000020   0xE006             B        ??LedOn_1
    113            }
    114            else
    115            {
    116              NRF_GPIO->OUTCLR = Led_au32BitPositions[eLED_];
   \                     ??LedOn_0: (+1)
   \   00000022   0x....             LDR      R1,??DataTable6_1
   \   00000024   0xB2C0             UXTB     R0,R0
   \   00000026   0x2204             MOVS     R2,#+4
   \   00000028   0x4342             MULS     R2,R0,R2
   \   0000002A   0x5889             LDR      R1,[R1, R2]
   \   0000002C   0x....             LDR      R2,??DataTable6_3  ;; 0x5000050c
   \   0000002E   0x6011             STR      R1,[R2, #+0]
    117            }
    118            
    119            /* Always set the LED back to LED_NORMAL_MODE mode */
    120          	Leds_asLedArray[(u8)eLED_].eMode = LED_NORMAL_MODE;
   \                     ??LedOn_1: (+1)
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x....             LDR      R2,??DataTable6
   \   00000034   0xB2C0             UXTB     R0,R0
   \   00000036   0x2308             MOVS     R3,#+8
   \   00000038   0x4343             MULS     R3,R0,R3
   \   0000003A   0x54D1             STRB     R1,[R2, R3]
    121          
    122          } /* end LedOn() */
   \   0000003C   0xBD00             POP      {PC}             ;; return
    123          
    124          
    125          /*----------------------------------------------------------------------------------------------------------------------
    126          Function: LedOff
    127          
    128          Description:
    129          Turn the specified LED off.  Automatically takes care of the active low vs. active
    130          high LEDs.  
    131          
    132          Requires:
    133            - eLED_ is a valid LED index
    134            - Definitions in Leds_asLedArray[eLED_] are correct
    135          
    136          Promises:
    137            - Requested LED is turned off
    138            - Requested LED is always set to LED_NORMAL_MODE mode
    139          */

   \                                 In section .text, align 2, keep-with-next
    140          void LedOff(LedNumberType eLED_)
    141          {
   \                     LedOff: (+1)
   \   00000000   0xB500             PUSH     {LR}
    142            if(Leds_asLedArray[eLED_].eActiveState == LED_ACTIVE_HIGH)
   \   00000002   0x....             LDR      R1,??DataTable6
   \   00000004   0xB2C0             UXTB     R0,R0
   \   00000006   0x2208             MOVS     R2,#+8
   \   00000008   0x4342             MULS     R2,R0,R2
   \   0000000A   0x1889             ADDS     R1,R1,R2
   \   0000000C   0x79C9             LDRB     R1,[R1, #+7]
   \   0000000E   0x2901             CMP      R1,#+1
   \   00000010   0xD107             BNE      ??LedOff_0
    143            {
    144              NRF_GPIO->OUTCLR = Led_au32BitPositions[eLED_];
   \   00000012   0x....             LDR      R1,??DataTable6_1
   \   00000014   0xB2C0             UXTB     R0,R0
   \   00000016   0x2204             MOVS     R2,#+4
   \   00000018   0x4342             MULS     R2,R0,R2
   \   0000001A   0x5889             LDR      R1,[R1, R2]
   \   0000001C   0x....             LDR      R2,??DataTable6_3  ;; 0x5000050c
   \   0000001E   0x6011             STR      R1,[R2, #+0]
   \   00000020   0xE006             B        ??LedOff_1
    145            }
    146            else
    147            {
    148              NRF_GPIO->OUTSET = Led_au32BitPositions[eLED_];
   \                     ??LedOff_0: (+1)
   \   00000022   0x....             LDR      R1,??DataTable6_1
   \   00000024   0xB2C0             UXTB     R0,R0
   \   00000026   0x2204             MOVS     R2,#+4
   \   00000028   0x4342             MULS     R2,R0,R2
   \   0000002A   0x5889             LDR      R1,[R1, R2]
   \   0000002C   0x....             LDR      R2,??DataTable6_2  ;; 0x50000508
   \   0000002E   0x6011             STR      R1,[R2, #+0]
    149            }
    150          
    151            /* Always set the LED back to LED_NORMAL_MODE mode */
    152            Leds_asLedArray[(u8)eLED_].eMode = LED_NORMAL_MODE;
   \                     ??LedOff_1: (+1)
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x....             LDR      R2,??DataTable6
   \   00000034   0xB2C0             UXTB     R0,R0
   \   00000036   0x2308             MOVS     R3,#+8
   \   00000038   0x4343             MULS     R3,R0,R3
   \   0000003A   0x54D1             STRB     R1,[R2, R3]
    153            
    154          } /* end LedOff() */
   \   0000003C   0xBD00             POP      {PC}             ;; return
    155          
    156          
    157          /*----------------------------------------------------------------------------------------------------------------------
    158          Function: LedToggle
    159          
    160          Description:
    161          Toggle the specified LED.
    162          
    163          Requires:
    164            - eLED_ is a valid LED index
    165            - eLED_ *should* be in LED_NORMAL_MODE
    166          
    167          Promises:
    168            - Requested LED is toggled
    169          */

   \                                 In section .text, align 2, keep-with-next
    170          void LedToggle(LedNumberType eLED_)
    171          {
    172            u32 u32Current_Leds;
    173            
    174            u32Current_Leds = NRF_GPIO->IN;
   \                     LedToggle: (+1)
   \   00000000   0x....             LDR      R2,??DataTable6_4  ;; 0x50000510
   \   00000002   0x6812             LDR      R2,[R2, #+0]
   \   00000004   0x0011             MOVS     R1,R2
    175            u32Current_Leds ^= Led_au32BitPositions[eLED_];
   \   00000006   0x000B             MOVS     R3,R1
   \   00000008   0x....             LDR      R1,??DataTable6_1
   \   0000000A   0xB2C0             UXTB     R0,R0
   \   0000000C   0x2204             MOVS     R2,#+4
   \   0000000E   0x4342             MULS     R2,R0,R2
   \   00000010   0x5889             LDR      R1,[R1, R2]
   \   00000012   0x4059             EORS     R1,R1,R3
    176            NRF_GPIO->OUT = u32Current_Leds;
   \   00000014   0x....             LDR      R2,??DataTable6_5  ;; 0x50000504
   \   00000016   0x6011             STR      R1,[R2, #+0]
    177                                                      
    178          } /* end LedToggle() */
   \   00000018   0x4770             BX       LR               ;; return
    179          
    180          
    181          /*----------------------------------------------------------------------------------------------------------------------
    182          Function: LedPWM
    183          
    184          Description:
    185          Sets an LED to PWM mode
    186          
    187          Requires:
    188            - eLED_ is a valid LED index
    189            - ePwmRate_ is an allowed duty cycle:
    190              LED_PWM_0, LED_PWM_5, LED_PWM_10, ..., LED_PWM_95, LED_PWM_100
    191          
    192          Promises:
    193            - Requested LED is set to PWM mode at the duty cycle specified
    194          */

   \                                 In section .text, align 2, keep-with-next
    195          void LedPWM(LedNumberType eLED_, LedRateType ePwmRate_)
    196          {
   \                     LedPWM: (+1)
   \   00000000   0xB410             PUSH     {R4}
    197          	Leds_asLedArray[(u8)eLED_].eMode = LED_PWM_MODE;
   \   00000002   0x2201             MOVS     R2,#+1
   \   00000004   0x....             LDR      R3,??DataTable6
   \   00000006   0xB2C0             UXTB     R0,R0
   \   00000008   0x2408             MOVS     R4,#+8
   \   0000000A   0x4344             MULS     R4,R0,R4
   \   0000000C   0x551A             STRB     R2,[R3, R4]
    198          	Leds_asLedArray[(u8)eLED_].eRate = ePwmRate_;
   \   0000000E   0x....             LDR      R2,??DataTable6
   \   00000010   0xB2C0             UXTB     R0,R0
   \   00000012   0x2308             MOVS     R3,#+8
   \   00000014   0x4343             MULS     R3,R0,R3
   \   00000016   0x18D2             ADDS     R2,R2,R3
   \   00000018   0x8051             STRH     R1,[R2, #+2]
    199          	Leds_asLedArray[(u8)eLED_].u16Count = (u16)ePwmRate_;
   \   0000001A   0x....             LDR      R2,??DataTable6
   \   0000001C   0xB2C0             UXTB     R0,R0
   \   0000001E   0x2308             MOVS     R3,#+8
   \   00000020   0x4343             MULS     R3,R0,R3
   \   00000022   0x18D2             ADDS     R2,R2,R3
   \   00000024   0x8091             STRH     R1,[R2, #+4]
    200            Leds_asLedArray[(u8)eLED_].eCurrentDuty = LED_PWM_DUTY_HIGH;
   \   00000026   0x2201             MOVS     R2,#+1
   \   00000028   0x....             LDR      R3,??DataTable6
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0x2408             MOVS     R4,#+8
   \   0000002E   0x4344             MULS     R4,R0,R4
   \   00000030   0x191B             ADDS     R3,R3,R4
   \   00000032   0x719A             STRB     R2,[R3, #+6]
    201          
    202          } /* end LedPWM() */
   \   00000034   0xBC10             POP      {R4}
   \   00000036   0x4770             BX       LR               ;; return
    203          
    204          
    205          /*----------------------------------------------------------------------------------------------------------------------
    206          Function: LedBlink
    207          
    208          Description:
    209          Sets an LED to BLINK mode.
    210          
    211          Requires:
    212            - eLED_ is a valid LED index
    213            - eBlinkRate_ is an allowed frequency:
    214              LED_0_5HZ, LED_1HZ, LED_2HZ, LED_4HZ, LED_8HZ
    215          
    216          Promises:
    217            - Requested LED is set to BLINK mode at the rate specified
    218          */

   \                                 In section .text, align 2, keep-with-next
    219          void LedBlink(LedNumberType eLED_, LedRateType eBlinkRate_)
    220          {
   \                     LedBlink: (+1)
   \   00000000   0xB410             PUSH     {R4}
    221          	Leds_asLedArray[(u8)eLED_].eMode = LED_BLINK_MODE;
   \   00000002   0x2202             MOVS     R2,#+2
   \   00000004   0x....             LDR      R3,??DataTable6
   \   00000006   0xB2C0             UXTB     R0,R0
   \   00000008   0x2408             MOVS     R4,#+8
   \   0000000A   0x4344             MULS     R4,R0,R4
   \   0000000C   0x551A             STRB     R2,[R3, R4]
    222          	Leds_asLedArray[(u8)eLED_].eRate = eBlinkRate_;
   \   0000000E   0x....             LDR      R2,??DataTable6
   \   00000010   0xB2C0             UXTB     R0,R0
   \   00000012   0x2308             MOVS     R3,#+8
   \   00000014   0x4343             MULS     R3,R0,R3
   \   00000016   0x18D2             ADDS     R2,R2,R3
   \   00000018   0x8051             STRH     R1,[R2, #+2]
    223          	Leds_asLedArray[(u8)eLED_].u16Count = eBlinkRate_;
   \   0000001A   0x....             LDR      R2,??DataTable6
   \   0000001C   0xB2C0             UXTB     R0,R0
   \   0000001E   0x2308             MOVS     R3,#+8
   \   00000020   0x4343             MULS     R3,R0,R3
   \   00000022   0x18D2             ADDS     R2,R2,R3
   \   00000024   0x8091             STRH     R1,[R2, #+4]
    224          
    225          } /* end LedBlink() */
   \   00000026   0xBC10             POP      {R4}
   \   00000028   0x4770             BX       LR               ;; return
    226          
    227          
    228          /*--------------------------------------------------------------------------------------------------------------------*/
    229          /* Protected functions */
    230          /*--------------------------------------------------------------------------------------------------------------------*/
    231          
    232          /*----------------------------------------------------------------------------------------------------------------------
    233          Function: LedInitialize
    234          
    235          Description:
    236          Initialization of LED system paramters and visual LED check.
    237          
    238          Requires:
    239            - G_u32SystemTime1ms ticking
    240            - All LEDs already initialized to LED_NORMAL_MODE mode ON
    241          
    242          Promises:
    243            - All LEDs in LED_NORMAL_MODE mode with OFF
    244          */

   \                                 In section .text, align 2, keep-with-next
    245          void LedInitialize(void)
    246          {
   \                     LedInitialize: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    247            LedNumberType aeLedSequenceHome[] = {HOME1, HOME2, HOME3, HOME6, HOME9, HOME8, HOME7, HOME4};
                                 ^
Warning[Pe177]: variable "aeLedSequenceHome" was declared but never referenced
   \   00000004   0xA802             ADD      R0,SP,#+8
   \   00000006   0x....             LDR      R1,??DataTable6_6
   \   00000008   0xC90C             LDM      R1!,{R2,R3}
   \   0000000A   0xC00C             STM      R0!,{R2,R3}
   \   0000000C   0x3908             SUBS     R1,R1,#+8
   \   0000000E   0x3808             SUBS     R0,R0,#+8
    248            LedNumberType aeLedSequenceAway[] = {AWAY1, AWAY4, AWAY7, AWAY8, AWAY9, AWAY6, AWAY3, AWAY2};
                                 ^
Warning[Pe177]: variable "aeLedSequenceAway" was declared but never referenced
   \   00000010   0x4668             MOV      R0,SP
   \   00000012   0x....             LDR      R1,??DataTable6_7
   \   00000014   0xC90C             LDM      R1!,{R2,R3}
   \   00000016   0xC00C             STM      R0!,{R2,R3}
   \   00000018   0x3908             SUBS     R1,R1,#+8
   \   0000001A   0x3808             SUBS     R0,R0,#+8
    249            
    250            /* All status lights on */
    251            //LedOn(STATUS_RED);
    252            //LedOn(STATUS_YLW);
    253            //LedOn(STATUS_GRN);
    254            
    255          #if 0
    256            /* For RC Car startup */
    257            
    258            LedNumberType aeLedSequenceDirections[] = {FRONT_LED, RIGHT_LED, BACK_LED, LEFT_LED};
    259            
    260            for(u8 n=0; n<3; n++){
    261              for(u8 i=0; i<4; i++){
    262                LedOn(aeLedSequenceDirections[i]);
    263                for(u32 j = 0; j < 200000; j++);
    264                LedOff(aeLedSequenceDirections[i]);
    265              }
    266            }
    267          
    268           /* Picture mode */
    269            LedOn(HOME1);
    270            LedOn(HOME5);
    271            LedOn(HOME7);
    272            LedOn(HOME2);
    273            LedOn(AWAY9);
    274            LedOn(AWAY4);
    275            LedOn(AWAY6);
    276            LedOn(AWAY8);
    277          
    278            while(1);
    279          
    280          #endif
    281            LedOff(HOME5);
   \   0000001C   0x2004             MOVS     R0,#+4
   \   0000001E   0x.... 0x....      BL       LedOff
    282            LedOn(AWAY5);
   \   00000022   0x200D             MOVS     R0,#+13
   \   00000024   0x.... 0x....      BL       LedOn
    283            
    284          #if 0
    285            /* Sequentially light up the LEDs (blocking is allowed during init)*/
    286            for(u8 i = 0; i < 8; i++)
    287            {
    288              LedToggle(HOME5);
    289              LedToggle(AWAY5);
    290              LedOn(aeLedSequenceHome[i]);
    291              LedOn(aeLedSequenceAway[i]);
    292              
    293              for(u32 j = 0; j < 200000; j++);
    294              
    295              LedOff(aeLedSequenceHome[i]);
    296              LedOff(aeLedSequenceAway[i]);
    297            }
    298          
    299          
    300            /* Sequentially light up the LEDs */
    301            for(u8 i = 0; i < 18; i++)
    302            {
    303              LedOn(aeLedSequence[i]);
    304              for(u32 j = 0; j < 300000; j++);
    305            }
    306          #endif
    307          
    308            /* Pause for show */
    309            for(u32 i = 0; i < 2000000; i++);
   \   00000028   0x2000             MOVS     R0,#+0
   \                     ??LedInitialize_0: (+1)
   \   0000002A   0x....             LDR      R1,??DataTable6_8  ;; 0x1e8480
   \   0000002C   0x4288             CMP      R0,R1
   \   0000002E   0xD201             BCS      ??LedInitialize_1
   \   00000030   0x1C40             ADDS     R0,R0,#+1
   \   00000032   0xE7FA             B        ??LedInitialize_0
    310          
    311            
    312          } /* end LedInitialize() */
   \                     ??LedInitialize_1: (+1)
   \   00000034   0xB005             ADD      SP,SP,#+20
   \   00000036   0xBD00             POP      {PC}             ;; return
    313          
    314          
    315          /*--------------------------------------------------------------------------------------------------------------------*/
    316          /* Private functions */
    317          /*--------------------------------------------------------------------------------------------------------------------*/
    318          
    319          /*!----------------------------------------------------------------------------------------------------------------------
    320          @fn void LedUpdate(void)
    321          
    322          @brief Update all LEDs for the current cycle.
    323          
    324          Requires:
    325          - G_u32SystemTime1ms is counting
    326          
    327          Promises:
    328          - All LEDs updated based on their counters
    329          
    330          */

   \                                 In section .text, align 2, keep-with-next
    331          void LedUpdate(void)
    332          {
   \                     LedUpdate: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    333          	/* Loop through each LED */
    334            for(u8 i = 0; i < TOTAL_LEDS; i++)
   \   00000002   0x2400             MOVS     R4,#+0
   \                     ??LedUpdate_0: (+1)
   \   00000004   0xB2E4             UXTB     R4,R4
   \   00000006   0x2C15             CMP      R4,#+21
   \   00000008   0xDB00             BLT      .+4
   \   0000000A   0xE0A6             B        ??LedUpdate_1
    335            {
    336              /* Check if LED is PWMing */
    337              if(Leds_asLedArray[(LedNumberType)i].eMode == LED_PWM_MODE)
   \   0000000C   0x....             LDR      R0,??DataTable6
   \   0000000E   0xB2E4             UXTB     R4,R4
   \   00000010   0x2108             MOVS     R1,#+8
   \   00000012   0x4361             MULS     R1,R4,R1
   \   00000014   0x5C40             LDRB     R0,[R0, R1]
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xD171             BNE      ??LedUpdate_2
    338              {
    339                /* Handle special case of 0% duty cycle */
    340                if( Leds_asLedArray[i].eRate == LED_PWM_0 )
   \   0000001A   0x....             LDR      R0,??DataTable6
   \   0000001C   0xB2E4             UXTB     R4,R4
   \   0000001E   0x2108             MOVS     R1,#+8
   \   00000020   0x4361             MULS     R1,R4,R1
   \   00000022   0x1840             ADDS     R0,R0,R1
   \   00000024   0x2102             MOVS     R1,#+2
   \   00000026   0x5E40             LDRSH    R0,[R0, R1]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD104             BNE      ??LedUpdate_3
    341                {
    342                  LedOff( (LedNumberType)i );
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0xB2C0             UXTB     R0,R0
   \   00000030   0x.... 0x....      BL       LedOff
   \   00000034   0xE05C             B        ??LedUpdate_4
    343                }
    344                
    345                /* Handle special case of 100% duty cycle */
    346                else if( Leds_asLedArray[i].eRate == LED_PWM_100 )
   \                     ??LedUpdate_3: (+1)
   \   00000036   0x....             LDR      R0,??DataTable6
   \   00000038   0xB2E4             UXTB     R4,R4
   \   0000003A   0x2108             MOVS     R1,#+8
   \   0000003C   0x4361             MULS     R1,R4,R1
   \   0000003E   0x1840             ADDS     R0,R0,R1
   \   00000040   0x2102             MOVS     R1,#+2
   \   00000042   0x5E40             LDRSH    R0,[R0, R1]
   \   00000044   0x2814             CMP      R0,#+20
   \   00000046   0xD104             BNE      ??LedUpdate_5
    347                {
    348                  LedOn( (LedNumberType)i );
   \   00000048   0x0020             MOVS     R0,R4
   \   0000004A   0xB2C0             UXTB     R0,R0
   \   0000004C   0x.... 0x....      BL       LedOn
   \   00000050   0xE04E             B        ??LedUpdate_4
    349                }
    350            
    351                /* Otherwise, regular PWM: decrement counter; toggle and reload if counter reaches 0 */
    352                else
    353                {
    354                  if(--Leds_asLedArray[(LedNumberType)i].u16Count == 0)
   \                     ??LedUpdate_5: (+1)
   \   00000052   0x....             LDR      R0,??DataTable6
   \   00000054   0xB2E4             UXTB     R4,R4
   \   00000056   0x2108             MOVS     R1,#+8
   \   00000058   0x4361             MULS     R1,R4,R1
   \   0000005A   0x1840             ADDS     R0,R0,R1
   \   0000005C   0x8880             LDRH     R0,[R0, #+4]
   \   0000005E   0x1E40             SUBS     R0,R0,#+1
   \   00000060   0x....             LDR      R1,??DataTable6
   \   00000062   0xB2E4             UXTB     R4,R4
   \   00000064   0x2208             MOVS     R2,#+8
   \   00000066   0x4362             MULS     R2,R4,R2
   \   00000068   0x1889             ADDS     R1,R1,R2
   \   0000006A   0x8088             STRH     R0,[R1, #+4]
   \   0000006C   0x....             LDR      R0,??DataTable6
   \   0000006E   0xB2E4             UXTB     R4,R4
   \   00000070   0x2108             MOVS     R1,#+8
   \   00000072   0x4361             MULS     R1,R4,R1
   \   00000074   0x1840             ADDS     R0,R0,R1
   \   00000076   0x8880             LDRH     R0,[R0, #+4]
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD139             BNE      ??LedUpdate_4
    355                  {
    356                    if(Leds_asLedArray[(LedNumberType)i].eCurrentDuty == LED_PWM_DUTY_HIGH)
   \   0000007C   0x....             LDR      R0,??DataTable6
   \   0000007E   0xB2E4             UXTB     R4,R4
   \   00000080   0x2108             MOVS     R1,#+8
   \   00000082   0x4361             MULS     R1,R4,R1
   \   00000084   0x1840             ADDS     R0,R0,R1
   \   00000086   0x7980             LDRB     R0,[R0, #+6]
   \   00000088   0x2801             CMP      R0,#+1
   \   0000008A   0xD11A             BNE      ??LedUpdate_6
    357                    {
    358                      /* Turn the LED off and update the counters for the next cycle */
    359                      LedOff( (LedNumberType)i );
   \   0000008C   0x0020             MOVS     R0,R4
   \   0000008E   0xB2C0             UXTB     R0,R0
   \   00000090   0x.... 0x....      BL       LedOff
    360                      Leds_asLedArray[(LedNumberType)i].u16Count = LED_PWM_PERIOD - Leds_asLedArray[(LedNumberType)i].eRate;
   \   00000094   0x2014             MOVS     R0,#+20
   \   00000096   0x....             LDR      R1,??DataTable6
   \   00000098   0xB2E4             UXTB     R4,R4
   \   0000009A   0x2208             MOVS     R2,#+8
   \   0000009C   0x4362             MULS     R2,R4,R2
   \   0000009E   0x1889             ADDS     R1,R1,R2
   \   000000A0   0x2202             MOVS     R2,#+2
   \   000000A2   0x5E89             LDRSH    R1,[R1, R2]
   \   000000A4   0x1A40             SUBS     R0,R0,R1
   \   000000A6   0x....             LDR      R1,??DataTable6
   \   000000A8   0xB2E4             UXTB     R4,R4
   \   000000AA   0x2208             MOVS     R2,#+8
   \   000000AC   0x4362             MULS     R2,R4,R2
   \   000000AE   0x1889             ADDS     R1,R1,R2
   \   000000B0   0x8088             STRH     R0,[R1, #+4]
    361                      Leds_asLedArray[(LedNumberType)i].eCurrentDuty = LED_PWM_DUTY_LOW;
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0x....             LDR      R1,??DataTable6
   \   000000B6   0xB2E4             UXTB     R4,R4
   \   000000B8   0x2208             MOVS     R2,#+8
   \   000000BA   0x4362             MULS     R2,R4,R2
   \   000000BC   0x1889             ADDS     R1,R1,R2
   \   000000BE   0x7188             STRB     R0,[R1, #+6]
   \   000000C0   0xE016             B        ??LedUpdate_4
    362                    }
    363                    else
    364                    {
    365                      /* Turn the LED on and update the counters for the next cycle */
    366                      LedOn( (LedNumberType)i );
   \                     ??LedUpdate_6: (+1)
   \   000000C2   0x0020             MOVS     R0,R4
   \   000000C4   0xB2C0             UXTB     R0,R0
   \   000000C6   0x.... 0x....      BL       LedOn
    367                      Leds_asLedArray[i].u16Count = Leds_asLedArray[i].eRate;
   \   000000CA   0x....             LDR      R0,??DataTable6
   \   000000CC   0xB2E4             UXTB     R4,R4
   \   000000CE   0x2108             MOVS     R1,#+8
   \   000000D0   0x4361             MULS     R1,R4,R1
   \   000000D2   0x1840             ADDS     R0,R0,R1
   \   000000D4   0x8840             LDRH     R0,[R0, #+2]
   \   000000D6   0x....             LDR      R1,??DataTable6
   \   000000D8   0xB2E4             UXTB     R4,R4
   \   000000DA   0x2208             MOVS     R2,#+8
   \   000000DC   0x4362             MULS     R2,R4,R2
   \   000000DE   0x1889             ADDS     R1,R1,R2
   \   000000E0   0x8088             STRH     R0,[R1, #+4]
    368                      Leds_asLedArray[i].eCurrentDuty = LED_PWM_DUTY_HIGH;
   \   000000E2   0x2001             MOVS     R0,#+1
   \   000000E4   0x....             LDR      R1,??DataTable6
   \   000000E6   0xB2E4             UXTB     R4,R4
   \   000000E8   0x2208             MOVS     R2,#+8
   \   000000EA   0x4362             MULS     R2,R4,R2
   \   000000EC   0x1889             ADDS     R1,R1,R2
   \   000000EE   0x7188             STRB     R0,[R1, #+6]
    369                    }
    370                  }
    371                }
    372          
    373                /* Set the LED back to PWM mode since LedOff and LedOn set it to normal mode */
    374               	Leds_asLedArray[(LedNumberType)i].eMode = LED_PWM_MODE;
   \                     ??LedUpdate_4: (+1)
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0x....             LDR      R1,??DataTable6
   \   000000F4   0xB2E4             UXTB     R4,R4
   \   000000F6   0x2208             MOVS     R2,#+8
   \   000000F8   0x4362             MULS     R2,R4,R2
   \   000000FA   0x5488             STRB     R0,[R1, R2]
   \   000000FC   0xE02B             B        ??LedUpdate_7
    375                
    376              } /* end if PWM mode */
    377              
    378              /* LED is in LED_BLINK_MODE mode */
    379              else if(Leds_asLedArray[(LedNumberType)i].eMode == LED_BLINK_MODE)
   \                     ??LedUpdate_2: (+1)
   \   000000FE   0x....             LDR      R0,??DataTable6
   \   00000100   0xB2E4             UXTB     R4,R4
   \   00000102   0x2108             MOVS     R1,#+8
   \   00000104   0x4361             MULS     R1,R4,R1
   \   00000106   0x5C40             LDRB     R0,[R0, R1]
   \   00000108   0x2802             CMP      R0,#+2
   \   0000010A   0xD124             BNE      ??LedUpdate_7
    380              {
    381                /* Decrement counter; toggle and reload if counter reaches 0 */
    382                if( --Leds_asLedArray[(LedNumberType)i].u16Count == 0)
   \   0000010C   0x....             LDR      R0,??DataTable6
   \   0000010E   0xB2E4             UXTB     R4,R4
   \   00000110   0x2108             MOVS     R1,#+8
   \   00000112   0x4361             MULS     R1,R4,R1
   \   00000114   0x1840             ADDS     R0,R0,R1
   \   00000116   0x8880             LDRH     R0,[R0, #+4]
   \   00000118   0x1E40             SUBS     R0,R0,#+1
   \   0000011A   0x....             LDR      R1,??DataTable6
   \   0000011C   0xB2E4             UXTB     R4,R4
   \   0000011E   0x2208             MOVS     R2,#+8
   \   00000120   0x4362             MULS     R2,R4,R2
   \   00000122   0x1889             ADDS     R1,R1,R2
   \   00000124   0x8088             STRH     R0,[R1, #+4]
   \   00000126   0x....             LDR      R0,??DataTable6
   \   00000128   0xB2E4             UXTB     R4,R4
   \   0000012A   0x2108             MOVS     R1,#+8
   \   0000012C   0x4361             MULS     R1,R4,R1
   \   0000012E   0x1840             ADDS     R0,R0,R1
   \   00000130   0x8880             LDRH     R0,[R0, #+4]
   \   00000132   0x2800             CMP      R0,#+0
   \   00000134   0xD10F             BNE      ??LedUpdate_7
    383                {
    384                  LedToggle( (LedNumberType)i );
   \   00000136   0x0020             MOVS     R0,R4
   \   00000138   0xB2C0             UXTB     R0,R0
   \   0000013A   0x.... 0x....      BL       LedToggle
    385                  Leds_asLedArray[(LedNumberType)i].u16Count = Leds_asLedArray[(LedNumberType)i].eRate;
   \   0000013E   0x....             LDR      R0,??DataTable6
   \   00000140   0xB2E4             UXTB     R4,R4
   \   00000142   0x2108             MOVS     R1,#+8
   \   00000144   0x4361             MULS     R1,R4,R1
   \   00000146   0x1840             ADDS     R0,R0,R1
   \   00000148   0x8840             LDRH     R0,[R0, #+2]
   \   0000014A   0x....             LDR      R1,??DataTable6
   \   0000014C   0xB2E4             UXTB     R4,R4
   \   0000014E   0x2208             MOVS     R2,#+8
   \   00000150   0x4362             MULS     R2,R4,R2
   \   00000152   0x1889             ADDS     R1,R1,R2
   \   00000154   0x8088             STRH     R0,[R1, #+4]
    386                }
    387              }
    388            } /* end for */
   \                     ??LedUpdate_7: (+1)
   \   00000156   0x1C64             ADDS     R4,R4,#+1
   \   00000158   0xE754             B        ??LedUpdate_0
    389            
    390          } /* end LedUpdate() */
   \                     ??LedUpdate_1: (+1)
   \   0000015A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     Leds_asLedArray

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     Led_au32BitPositions

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x50000508         DC32     0x50000508

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x5000050C         DC32     0x5000050c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x50000510         DC32     0x50000510

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x50000504         DC32     0x50000504

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x001E8480         DC32     0x1e8480

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x00 0x01          DC8 0, 1, 2, 5, 8, 7, 6, 3
   \              0x02 0x05    
   \              0x08 0x07    
   \              0x06 0x03    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x09 0x0C          DC8 9, 12, 15, 16, 17, 14, 11, 10
   \              0x0F 0x10    
   \              0x11 0x0E    
   \              0x0B 0x0A    
    391          
    392          
    393          
    394          
    395          /*--------------------------------------------------------------------------------------------------------------------*/
    396          /* End of File */
    397          /*--------------------------------------------------------------------------------------------------------------------*/
    398          
    399          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   LedBlink
      24   LedInitialize
        24   -> LedOff
        24   -> LedOn
       4   LedOff
       4   LedOn
       4   LedPWM
       0   LedToggle
       8   LedUpdate
         8   -> LedOff
         8   -> LedOn
         8   -> LedToggle


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       8  ?_0
       8  ?_1
      42  LedBlink
      56  LedInitialize
      62  LedOff
      62  LedOn
      56  LedPWM
      26  LedToggle
     348  LedUpdate
      84  Led_au32BitPositions
     168  Leds_asLedArray

 
 252 bytes in section .data
  16 bytes in section .rodata
 688 bytes in section .text
 
 688 bytes of CODE  memory
  16 bytes of CONST memory
 252 bytes of DATA  memory

Errors: none
Warnings: 2
